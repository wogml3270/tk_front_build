{"version":3,"file":"static/js/2460.521ee19a.chunk.js","mappings":"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","sources":["api/Association/statisticAPI.js","components/common/NivoCharts/LevelChart.jsx","components/common/Rank/RankImage.jsx","utils/lib/Regex.js"],"sourcesContent":["import authApi from \"../authApi\"\r\n\r\nexport const getASUserCount = async (year, region) => {\r\n  const res = await authApi.get(`associ/as_usercount_year/${year}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getAgeStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_age/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getGenderStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_sex/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getStudentCountStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_usercount/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getDojangCountStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_dojangcount/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getLevelStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_geub/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getLevelupStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_geub_levelup/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getPoomStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_poom/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getPoomUpStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_poom_levelup/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport { numberWithCommas } from '../../../utils/lib/Regex';\r\nimport RankImage from '../Rank/RankImage';\r\n\r\nconst LevelChart = ({data1, data2, type, ...props}) => {\r\n\r\n  const [state , setState] = useState(0)\r\n  \r\n  const [ dataA, setDataA ] = useState('')\r\n  const [ dataB, setDataB ] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (data1 && data2) {\r\n      // data1 value 합계\r\n      const data1Sum = data1?.reduce((acc, cur) => {\r\n        return acc + cur.value;\r\n      }, 0);\r\n  \r\n      // data2 value 합계\r\n      const data2Sum = data2?.reduce((acc, cur) => {\r\n        return acc + cur.value;\r\n      }, 0);\r\n  \r\n      // data1 value의 합계의 퍼센트 값으로 변경하고 formattedValue에 저장\r\n      const tempA = data1?.map((item) => {\r\n          return {...item, formattedValue: (item.value / data1Sum) * 100}\r\n        }\r\n      );\r\n      setDataA(tempA)\r\n  \r\n      // data2 value의 합계의 퍼센트 값으로 변경하고 formattedValue에 저장\r\n      const tempB = data2?.map((item) => {\r\n          return {...item, formattedValue: (item.value / data2Sum) * 100}\r\n        }\r\n      );\r\n      setDataB(tempB)\r\n    }\r\n\r\n  }, [data1, data2]);\r\n\r\n  const handle = {\r\n    barClick: (data) => {\r\n      return\r\n    },\r\n\r\n    legendClick: (data) => {\r\n      return\r\n    },\r\n  };\r\n\r\n  if ((type === '급') && dataA && dataB ) {\r\n    return (\r\n      // chart height 값이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\r\n      <>\r\n        <div\r\n          style={{\r\n            width: '370px',\r\n            height: '440px',\r\n            margin: '0 auto',\r\n            position: 'relative',\r\n          }}\r\n        >\r\n          <div\r\n            onClick={() => setState(0)}\r\n            style={{\r\n              color: state === 0 ? '#000000' : '#AAAAAA',\r\n              fontSize: '16px',\r\n              fontWeight: 'bold',\r\n              position: 'absolute',\r\n              margin: 0,\r\n              paddingBottom: '5px',\r\n              top: 15,\r\n              left: 20,\r\n              zIndex: 999,\r\n              cursor: 'pointer',\r\n              borderBottom: state === 0 ? '2px solid #FFAD2C' : 'none',\r\n            }}\r\n          >\r\n            급별 수련생 수\r\n          </div>\r\n          <div\r\n            onClick={() => setState(1)}\r\n            style={{\r\n              color: state === 1 ? '#000000' : '#AAAAAA',\r\n              fontSize: '16px',\r\n              fontWeight: 'bold',\r\n              position: 'absolute',\r\n              margin: 0,\r\n              paddingBottom: '5px',\r\n              top: 15,\r\n              left: 140,\r\n              zIndex: 999,\r\n              cursor: 'pointer',\r\n              borderBottom: state === 1 ? '2px solid #FFAD2C' : 'none',\r\n            }}\r\n          >\r\n            급별 진급생 수\r\n          </div>\r\n          {state === 0 && (\r\n            <ResponsiveBar\r\n              {...props}\r\n              /**\r\n               * chart에 사용될 데이터\r\n               */\r\n              data={dataA}\r\n              /**\r\n               * chart에 보여질 데이터 key (측정되는 값)\r\n               */\r\n              layout=\"horizontal\"\r\n              keys={['value']}\r\n              /**\r\n               * keys들을 그룹화하는 index key (분류하는 값)\r\n               */\r\n              indexBy=\"level\"\r\n              /**\r\n               * chart margin\r\n               */\r\n              margin={{ top: 80, right: 50, bottom: 50, left: 60 }}\r\n              /**\r\n               * chart padding (bar간 간격)\r\n               */\r\n              padding={0.5}\r\n              /**\r\n               * chart 색상\r\n               */\r\n              colors={['#FFAD2C']} // 커스텀하여 사용할 때\r\n              // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n              /**\r\n               * color 적용 방식\r\n               */\r\n              colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\r\n              // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n              label={false} // bar에 표현되는 글씨\r\n              tooltip={(e) => {\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      background: '#FFFFFF',\r\n                      padding: '5px 15px',\r\n                      borderRadius: '4px',\r\n                      boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                      fontSize: '12px',\r\n                      fontWeight: 'bold',\r\n                      color: '#000000',\r\n                    }}\r\n                  >\r\n                    {e.data.level} : {numberWithCommas(e.data.value)}명 (\r\n                    {e.data?.formattedValue?.toFixed(2)}%)\r\n                  </div>\r\n                );\r\n              }}\r\n              theme={{\r\n                /**\r\n                 * label style (bar에 표현되는 글씨)\r\n                 */\r\n                labels: {\r\n                  text: {\r\n                    fontSize: 12,\r\n                    fill: '#ffffff',\r\n                  },\r\n                },\r\n                /**\r\n                 * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n                 */\r\n                // legends: {\r\n                //     text: {\r\n                //         fontSize: 16,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                axis: {\r\n                  /**\r\n                   * axis legend style (bottom, left에 있는 글씨)\r\n                   */\r\n                  // legend: {\r\n                  //     text: {\r\n                  //         fontSize: 18,\r\n                  //         fill: '#000000',\r\n                  //     },\r\n                  // },\r\n                  /**\r\n                   * axis ticks style (bottom, left에 있는 값)\r\n                   */\r\n                  ticks: {\r\n                    text: {\r\n                      fontSize: 15,\r\n                      fill: '#000000',\r\n                    },\r\n                  },\r\n                  domain: {\r\n                    line: {\r\n                      stroke: '#000000',\r\n                      strokeWidth: 1,\r\n                    },\r\n                  },\r\n                },\r\n                grid: {\r\n                  line: {\r\n                    stroke: '#EEEEEE',\r\n                    strokeWidth: 3,\r\n                    strokeDasharray: '4 4',\r\n                  },\r\n                },\r\n              }}\r\n              /**\r\n               * axis bottom 설정\r\n               */\r\n              axisBottom={{\r\n                tickValues: 5, // tick 개수\r\n                tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n                tickPadding: 5, // tick padding\r\n                tickRotation: 0, // tick 기울기\r\n                legend: false, // bottom 글씨\r\n                legendPosition: 'middle', // 글씨 위치\r\n                legendOffset: 20, // 글씨와 chart간 간격\r\n              }}\r\n              /**\r\n               * axis left 설정\r\n               */\r\n              axisLeft={{\r\n                tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n                tickPadding: 5, // tick padding\r\n                tickRotation: 0, // tick 기울기\r\n                legend: false, // left 글씨\r\n                legendPosition: 'middle', // 글씨 위치\r\n                legendOffset: -60, // 글씨와 chart간 간격\r\n              }}\r\n              /**\r\n               * label 안보이게 할 기준 width\r\n               */\r\n              // labelSkipWidth={36}\r\n              /**\r\n               * label 안보이게 할 기준 height\r\n               */\r\n              labelSkipWidth={50}\r\n              /**\r\n               * bar 클릭 이벤트\r\n               */\r\n              onClick={handle.barClick}\r\n              /**\r\n               * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              borderRadius={5} // legend border radius\r\n              enableGridX={true} // x축 grid line\r\n              enableGridY={false} // y축 grid line\r\n            />\r\n          )}\r\n          {state === 1 && (\r\n            <ResponsiveBar\r\n              {...props}\r\n              /**\r\n               * chart에 사용될 데이터\r\n               */\r\n              data={dataB}\r\n              /**\r\n               * chart에 보여질 데이터 key (측정되는 값)\r\n               */\r\n              layout=\"horizontal\"\r\n              keys={['value']}\r\n              /**\r\n               * keys들을 그룹화하는 index key (분류하는 값)\r\n               */\r\n              indexBy=\"level\"\r\n              /**\r\n               * chart margin\r\n               */\r\n              margin={{ top: 80, right: 50, bottom: 50, left: 60 }}\r\n              /**\r\n               * chart padding (bar간 간격)\r\n               */\r\n              padding={0.5}\r\n              /**\r\n               * chart 색상\r\n               */\r\n              colors={['#FFAD2C']} // 커스텀하여 사용할 때\r\n              // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n              /**\r\n               * color 적용 방식\r\n               */\r\n              colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\r\n              // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n              label={false} // bar에 표현되는 글씨\r\n              tooltip={(e) => {\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      background: '#FFFFFF',\r\n                      padding: '5px 15px',\r\n                      borderRadius: '4px',\r\n                      boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                      fontSize: '12px',\r\n                      fontWeight: 'bold',\r\n                      color: '#000000',\r\n                    }}\r\n                  >\r\n                    {e.data.level} : {numberWithCommas(e.data.value)}명 (\r\n                    {e.data?.formattedValue?.toFixed(2)}%)\r\n                  </div>\r\n                );\r\n              }}\r\n              theme={{\r\n                /**\r\n                 * label style (bar에 표현되는 글씨)\r\n                 */\r\n                labels: {\r\n                  text: {\r\n                    fontSize: 12,\r\n                    fill: '#ffffff',\r\n                  },\r\n                },\r\n                /**\r\n                 * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n                 */\r\n                // legends: {\r\n                //     text: {\r\n                //         fontSize: 16,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                axis: {\r\n                  /**\r\n                   * axis legend style (bottom, left에 있는 글씨)\r\n                   */\r\n                  // legend: {\r\n                  //     text: {\r\n                  //         fontSize: 18,\r\n                  //         fill: '#000000',\r\n                  //     },\r\n                  // },\r\n                  /**\r\n                   * axis ticks style (bottom, left에 있는 값)\r\n                   */\r\n                  ticks: {\r\n                    text: {\r\n                      fontSize: 15,\r\n                      fill: '#000000',\r\n                    },\r\n                  },\r\n                  domain: {\r\n                    line: {\r\n                      stroke: '#000000',\r\n                      strokeWidth: 1,\r\n                    },\r\n                  },\r\n                },\r\n                grid: {\r\n                  line: {\r\n                    stroke: '#EEEEEE',\r\n                    strokeWidth: 3,\r\n                    strokeDasharray: '4 4',\r\n                  },\r\n                },\r\n              }}\r\n              /**\r\n               * axis bottom 설정\r\n               */\r\n              axisBottom={{\r\n                tickValues: 5, // tick 개수\r\n                tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n                tickPadding: 5, // tick padding\r\n                tickRotation: 0, // tick 기울기\r\n                legend: false, // bottom 글씨\r\n                legendPosition: 'middle', // 글씨 위치\r\n                legendOffset: 20, // 글씨와 chart간 간격\r\n              }}\r\n              /**\r\n               * axis left 설정\r\n               */\r\n              axisLeft={{\r\n                tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n                tickPadding: 5, // tick padding\r\n                tickRotation: 0, // tick 기울기\r\n                legend: false, // left 글씨\r\n                legendPosition: 'middle', // 글씨 위치\r\n                legendOffset: -60, // 글씨와 chart간 간격\r\n              }}\r\n              /**\r\n               * label 안보이게 할 기준 width\r\n               */\r\n              // labelSkipWidth={36}\r\n              /**\r\n               * label 안보이게 할 기준 height\r\n               */\r\n              labelSkipWidth={50}\r\n              /**\r\n               * bar 클릭 이벤트\r\n               */\r\n              onClick={handle.barClick}\r\n              /**\r\n               * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              borderRadius={5} // legend border radius\r\n              enableGridX={true} // x축 grid line\r\n              enableGridY={false} // y축 grid line\r\n            />\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  if ((type === '품') && dataA && dataB ){\r\n\r\n    return (\r\n      // chart height 값이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\r\n      <div\r\n        style={{\r\n          width: '370px',\r\n          height: '280px',\r\n          margin: '0 auto',\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <div\r\n          onClick={() => setState(0)}\r\n          style={{\r\n            color: state === 0 ? '#000000' : '#AAAAAA',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            position: 'absolute',\r\n            margin: 0,\r\n            paddingBottom: '5px',\r\n            top: 15,\r\n            left: 20,\r\n            zIndex: 999,\r\n            cursor: 'pointer',\r\n            borderBottom: state === 0 ? '2px solid #333333' : 'none',\r\n          }}\r\n        >\r\n          품/단별 수련생 수\r\n        </div>\r\n        <div\r\n          onClick={() => setState(1)}\r\n          style={{\r\n            color: state === 1 ? '#000000' : '#AAAAAA',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            position: 'absolute',\r\n            margin: 0,\r\n            paddingBottom: '5px',\r\n            top: 15,\r\n            left: 160,\r\n            zIndex: 999,\r\n            cursor: 'pointer',\r\n            borderBottom: state === 1 ? '2px solid #333333' : 'none',\r\n          }}\r\n        >\r\n          품/단별 진급생 수\r\n        </div>\r\n        {state === 0 && (\r\n          <ResponsiveBar\r\n            {...props}\r\n            /**\r\n             * chart에 사용될 데이터\r\n             */\r\n            data={dataA}\r\n            /**\r\n             * chart에 보여질 데이터 key (측정되는 값)\r\n             */\r\n            layout=\"horizontal\"\r\n            keys={['value']}\r\n            /**\r\n             * keys들을 그룹화하는 index key (분류하는 값)\r\n             */\r\n            indexBy=\"level\"\r\n            /**\r\n             * chart margin\r\n             */\r\n            margin={{ top: 80, right: 50, bottom: 50, left: 60 }}\r\n            /**\r\n             * chart padding (bar간 간격)\r\n             */\r\n            padding={0.5}\r\n            /**\r\n             * chart 색상\r\n             */\r\n            colors={['#333333']} // 커스텀하여 사용할 때\r\n            // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n            /**\r\n             * color 적용 방식\r\n             */\r\n            colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\r\n            // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n            label={false} // bar에 표현되는 글씨\r\n            tooltip={(e) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    background: '#FFFFFF',\r\n                    padding: '5px 15px',\r\n                    borderRadius: '4px',\r\n                    boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                    fontSize: '12px',\r\n                    fontWeight: 'bold',\r\n                    color: '#000000',\r\n                  }}\r\n                >\r\n                  {e.data.level} : {numberWithCommas(e.data.value)}명 (\r\n                  {e.data?.formattedValue?.toFixed(2)}%)\r\n                </div>\r\n              );\r\n            }}\r\n            theme={{\r\n              /**\r\n               * label style (bar에 표현되는 글씨)\r\n               */\r\n              labels: {\r\n                text: {\r\n                  fontSize: 12,\r\n                  fill: '#ffffff',\r\n                },\r\n              },\r\n              /**\r\n               * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              legends: {\r\n                text: {\r\n                  fontSize: 16,\r\n                  fill: '#000000',\r\n                },\r\n              },\r\n              axis: {\r\n                /**\r\n                 * axis legend style (bottom, left에 있는 글씨)\r\n                 */\r\n                // legend: {\r\n                //     text: {\r\n                //         fontSize: 18,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                /**\r\n                 * axis ticks style (bottom, left에 있는 값)\r\n                 */\r\n                ticks: {\r\n                  text: {\r\n                    fontSize: 14,\r\n                    fill: '#000000',\r\n                  },\r\n                },\r\n                domain: {\r\n                  line: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 1,\r\n                  },\r\n                },\r\n              },\r\n              grid: {\r\n                line: {\r\n                  stroke: '#EEEEEE',\r\n                  strokeWidth: 3,\r\n                  strokeDasharray: '4 4',\r\n                },\r\n              },\r\n            }}\r\n            /**\r\n             * axis bottom 설정\r\n             */\r\n            axisBottom={{\r\n              tickValues: 5, // tick 개수\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              legend: false, // bottom 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: 40, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * axis left 설정\r\n             */\r\n            axisLeft={{\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              //legend: 'price', // left 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: -60, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * label 안보이게 할 기준 width\r\n             */\r\n            // labelSkipWidth={36}\r\n            /**\r\n             * label 안보이게 할 기준 height\r\n             */\r\n            labelSkipWidth={50}\r\n            /**\r\n             * bar 클릭 이벤트\r\n             */\r\n            onClick={handle.barClick}\r\n            /**\r\n             * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n             */\r\n            borderRadius={5} // legend border radius\r\n            enableGridX={true} // x축 grid line\r\n            enableGridY={false} // y축 grid line\r\n          />\r\n        )}\r\n        {state === 1 && (\r\n          <ResponsiveBar\r\n            {...props}\r\n            /**\r\n             * chart에 사용될 데이터\r\n             */\r\n            data={dataB}\r\n            /**\r\n             * chart에 보여질 데이터 key (측정되는 값)\r\n             */\r\n            layout=\"horizontal\"\r\n            keys={['value']}\r\n            /**\r\n             * keys들을 그룹화하는 index key (분류하는 값)\r\n             */\r\n            indexBy=\"level\"\r\n            /**\r\n             * chart margin\r\n             */\r\n            margin={{ top: 80, right: 50, bottom: 50, left: 60 }}\r\n            /**\r\n             * chart padding (bar간 간격)\r\n             */\r\n            padding={0.5}\r\n            /**\r\n             * chart 색상\r\n             */\r\n            colors={['#333333']} // 커스텀하여 사용할 때\r\n            // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n            /**\r\n             * color 적용 방식\r\n             */\r\n            colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\r\n            // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n            label={false} // bar에 표현되는 글씨\r\n            tooltip={(e) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    background: '#FFFFFF',\r\n                    padding: '5px 15px',\r\n                    borderRadius: '4px',\r\n                    boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                    fontSize: '12px',\r\n                    fontWeight: 'bold',\r\n                    color: '#000000',\r\n                  }}\r\n                >\r\n                  {e.data.level} : {numberWithCommas(e.data.value)}명 (\r\n                  {e.data?.formattedValue?.toFixed(2)}%)\r\n                </div>\r\n              );\r\n            }}\r\n            theme={{\r\n              /**\r\n               * label style (bar에 표현되는 글씨)\r\n               */\r\n              labels: {\r\n                text: {\r\n                  fontSize: 12,\r\n                  fill: '#ffffff',\r\n                },\r\n              },\r\n              /**\r\n               * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              legends: {\r\n                text: {\r\n                  fontSize: 16,\r\n                  fill: '#000000',\r\n                },\r\n              },\r\n              axis: {\r\n                /**\r\n                 * axis legend style (bottom, left에 있는 글씨)\r\n                 */\r\n                // legend: {\r\n                //     text: {\r\n                //         fontSize: 18,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                /**\r\n                 * axis ticks style (bottom, left에 있는 값)\r\n                 */\r\n                ticks: {\r\n                  text: {\r\n                    fontSize: 14,\r\n                    fill: '#000000',\r\n                  },\r\n                },\r\n                domain: {\r\n                  line: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 1,\r\n                  },\r\n                },\r\n              },\r\n              grid: {\r\n                line: {\r\n                  stroke: '#EEEEEE',\r\n                  strokeWidth: 3,\r\n                  strokeDasharray: '4 4',\r\n                },\r\n              },\r\n            }}\r\n            /**\r\n             * axis bottom 설정\r\n             */\r\n            axisBottom={{\r\n              tickValues: 5, // tick 개수\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              legend: false, // bottom 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: 40, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * axis left 설정\r\n             */\r\n            axisLeft={{\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              //legend: 'price', // left 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: -60, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * label 안보이게 할 기준 width\r\n             */\r\n            // labelSkipWidth={36}\r\n            /**\r\n             * label 안보이게 할 기준 height\r\n             */\r\n            labelSkipWidth={50}\r\n            /**\r\n             * bar 클릭 이벤트\r\n             */\r\n            onClick={handle.barClick}\r\n            /**\r\n             * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n             */\r\n            borderRadius={5} // legend border radius\r\n            enableGridX={true} // x축 grid line\r\n            enableGridY={false} // y축 grid line\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  return ''\r\n};\r\n\r\nexport default LevelChart;\r\n\r\n// my notbook","import React, { useState, useEffect } from 'react'\r\n\r\nconst  RankImage = ({ src, src2, ...props }) => {\r\n\r\n  const rank_link = `https://tkdw-img.s3.ap-northeast-2.amazonaws.com/rank/${src}.png`;\r\n\r\n  const [rank, setRank] = useState('')\r\n\r\n  useEffect(() => {\r\n    if(rank_link){\r\n      setRank(rank_link)\r\n    }\r\n  }, [rank_link])\r\n\r\n\r\n  switch(src) {\r\n    case '단': case '1단': case '2단': case '3단': case '4단': case '5단': case '6단': case '7단': case '8단': case '9단': \r\n      return <img src={rank} alt=\"rank, 단\" {...props} />\r\n    case '품' : case '1품': case '2품': case '3품': case '4품': case '5품': case '6품': case '7품': case '8품': case '9품':\r\n      return <img src={rank} alt=\"rank, 품\" {...props} />\r\n    case '1급': case '2급': case '3급': case '4급': case '5급': case '6급': case '7급': case '8급': case '9급':\r\n      return <img src={rank} alt=\"rank, 급\" {...props} />\r\n    default : return null\r\n  }\r\n\r\n}\r\n\r\nexport default RankImage","\r\n// ID 체크\r\nconst idRegex = new RegExp(/^[a-z0-9_]{6,20}$/);\r\n\r\n// 한글+영문 2글자 이상 20글자 이하 체크\r\nconst nameRegex = new RegExp(/^[가-힣]{1,6}$/);\r\n\r\n// 성 regex 체크\r\nconst lastNameRegex = new RegExp(/^[가-힣]{1,3}$/);\r\n\r\n//email형식 체크\r\nconst emailRegex = new RegExp(/(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/);\r\n\r\n// 비밀번호 영어소문자+숫자+글자수(6글자 이상, 20글자 이하) 체크\r\nconst passwordRegex = new RegExp(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d\\w\\W]{8,20}$/);\r\n\r\n// 비밀번호 일치 확인\r\nconst passwordConfirmRegex = (password, passwordConfirm) => {\r\n    return password === passwordConfirm;\r\n};\r\n\r\n// 휴대폰번호 형식 체크\r\nconst phoneRegex = new RegExp(/^\\d{3}-\\d{3,4}-\\d{4}$/);\r\n\r\n// 숫자만 입력받기\r\nconst numberRegex = (value) => {\r\n  return value.replace(/[^0-9]/g, '');\r\n};\r\n\r\n// 휴대폰번호 하이폰(-) 정규식\r\nconst phoneHyphenRegex = (phone) => {\r\n  return phone && phone?.replace(/[^0-9]/g, '')\r\n  ?.replace(/^(\\d{0,3})(\\d{0,4})(\\d{0,4})$/g, \"$1-$2-$3\")\r\n  ?.replace(/(\\-{1,2})$/g, \"\");\r\n};\r\n\r\n// 숫자 1000단위 콤마 찍기 함수\r\nconst numberWithCommas = (value) => {\r\n  return value\r\n    \t.toString()\r\n      .replace(/(\\..*)$|(\\d)(?=(\\d{3})+(?!\\d))/g, (digit, fract) => fract || digit + ',');\r\n};\r\n\r\n// 사업자 등록 번호 하이폰(-) 정규식\r\nconst businessNumberHyphenRegex = (businessNumber) => {\r\n  return businessNumber && businessNumber?.replace(/[^0-9]/g, '')\r\n  ?.replace(/^(\\d{0,3})(\\d{0,2})(\\d{0,5})$/g, \"$1-$2-$3\")\r\n  ?.replace(/(\\-{1,2})$/g, \"\");\r\n};\r\n\r\n\r\n\r\nexport { \r\n  idRegex, \r\n  nameRegex, \r\n  lastNameRegex,\r\n  emailRegex, \r\n  passwordRegex, \r\n  numberRegex,\r\n  phoneRegex, \r\n  phoneHyphenRegex,\r\n  passwordConfirmRegex,\r\n  numberWithCommas,\r\n  businessNumberHyphenRegex,\r\n};"],"names":["getASUserCount","year","region","authApi","res","data","getAgeStatistic","month","getGenderStatistic","getStudentCountStatistic","getDojangCountStatistic","getLevelStudentStatistic","getLevelupStudentStatistic","getPoomStudentStatistic","getPoomUpStudentStatistic","data1","data2","type","props","useState","state","setState","dataA","setDataA","dataB","setDataB","useEffect","data1Sum","reduce","acc","cur","value","data2Sum","tempA","map","item","formattedValue","tempB","handle","barClick","legendClick","style","width","height","margin","position","onClick","color","fontSize","fontWeight","paddingBottom","top","left","zIndex","cursor","borderBottom","layout","keys","indexBy","right","bottom","padding","colors","colorBy","label","tooltip","e","background","borderRadius","boxShadow","level","numberWithCommas","toFixed","theme","labels","text","fill","axis","ticks","domain","line","stroke","strokeWidth","grid","strokeDasharray","axisBottom","tickValues","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","enableGridX","enableGridY","legends","src","src2","rank_link","rank","setRank","alt","idRegex","RegExp","nameRegex","lastNameRegex","emailRegex","passwordRegex","passwordConfirmRegex","password","passwordConfirm","phoneRegex","numberRegex","replace","phoneHyphenRegex","phone","toString","digit","fract","businessNumberHyphenRegex","businessNumber"],"sourceRoot":""}