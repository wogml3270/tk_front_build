{"version":3,"file":"static/js/1083.c08632f5.chunk.js","mappings":"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","sources":["api/Association/statisticAPI.js","components/common/NivoCharts/BarChart.jsx","pages/UserAssociation/AssociationHome/Chart/StudentDojangStatistic.jsx","utils/lib/Regex.js"],"sourcesContent":["import authApi from \"../authApi\"\r\n\r\nexport const getASUserCount = async (year, region) => {\r\n  const res = await authApi.get(`associ/as_usercount_year/${year}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getAgeStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_age/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getGenderStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_sex/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getStudentCountStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_usercount/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getDojangCountStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_dojangcount/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getLevelStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_geub/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getLevelupStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_geub_levelup/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getPoomStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_poom/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\nexport const getPoomUpStudentStatistic = async (year, month, region) => {\r\n  const res = await authApi.get(`associ/as_poom_levelup/${year}/${month}/${region}`)\r\n  return res.data\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport { BarData, BarData2 } from './Data/BarData';\r\nimport { numberWithCommas } from '../../../utils/lib/Regex';\r\n\r\nconst BarChart = ({data1, data2, ...props}) => {\r\n\r\n  const [state, setState] = useState(0);\r\n\r\n  const [ dataA, setDataA ] = useState('')\r\n  const [ dataB, setDataB ] = useState('')\r\n\r\n\r\n  useEffect(() => {\r\n    if (data1 && data2) {\r\n      // data1 value 합계\r\n      const data1Sum = data1?.reduce((acc, cur) => {\r\n        return acc + cur.value;\r\n      }, 0);\r\n  \r\n      // data2 value 합계\r\n      const data2Sum = data2?.reduce((acc, cur) => {\r\n        return acc + cur.value;\r\n      }, 0);\r\n  \r\n      // data1 value의 합계의 퍼센트 값으로 변경하고 formattedValue에 저장\r\n      const tempA = data1?.map((item) => {\r\n          return {...item, formattedValue: (item.value / data1Sum) * 100}\r\n        }\r\n      );\r\n      setDataA(tempA)\r\n  \r\n      // data2 value의 합계의 퍼센트 값으로 변경하고 formattedValue에 저장\r\n      const tempB = data2?.map((item) => {\r\n          return {...item, formattedValue: (item.value / data2Sum) * 100}\r\n        }\r\n      );\r\n      setDataB(tempB)\r\n    }\r\n\r\n  }, [data1, data2]);\r\n\r\n  const handle = {\r\n    barClick: (data) => {\r\n        // console.log(data);\r\n    },\r\n\r\n    legendClick: (data) => {\r\n        // console.log(data);\r\n    },\r\n  };\r\n\r\n  return (\r\n    // chart height 값이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\r\n    <>\r\n      <div\r\n        style={{\r\n          width: '985px',\r\n          height: '400px',\r\n          margin: '0 auto',\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <div\r\n          onClick={() => setState(0)}\r\n          style={{\r\n            color: state === 0 ? '#000000' : '#AAAAAA',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            position: 'absolute',\r\n            margin: 0,\r\n            paddingBottom: '5px',\r\n            top: 15,\r\n            left: 20,\r\n            zIndex: 999,\r\n            cursor: 'pointer',\r\n            borderBottom: state === 0 ? '2px solid #11BFEA' : 'none',\r\n          }}\r\n        >\r\n          시도별 수련생 수\r\n        </div>\r\n        <div\r\n          onClick={() => setState(1)}\r\n          style={{\r\n            color: state === 1 ? '#000000' : '#AAAAAA',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            position: 'absolute',\r\n            margin: 0,\r\n            paddingBottom: '5px',\r\n            top: 15,\r\n            left: 160,\r\n            zIndex: 999,\r\n            cursor: 'pointer',\r\n            borderBottom: state === 1 ? '2px solid #11BFEA' : 'none',\r\n          }}\r\n        >\r\n          시도별 도장 수\r\n        </div>\r\n        {state === 0 && dataA && (\r\n          <ResponsiveBar\r\n            {...props}\r\n            /**\r\n             * chart에 사용될 데이터\r\n             */\r\n            data={dataA}\r\n            /**\r\n             * chart에 보여질 데이터 key (측정되는 값)\r\n             */\r\n            keys={['value']}\r\n            /**\r\n             * keys들을 그룹화하는 index key (분류하는 값)\r\n             */\r\n            indexBy=\"region\"\r\n            /**\r\n             * chart margin\r\n             */\r\n            margin={{ top: 80, right: 50, bottom: 50, left: 70 }}\r\n            /**\r\n             * chart padding (bar간 간격)\r\n             */\r\n            padding={0.3}\r\n            /**\r\n             * chart 색상\r\n             */\r\n            colors={['#11BFEA']} // 커스텀하여 사용할 때\r\n            // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n            /**\r\n             * color 적용 방식\r\n             */\r\n            colorBy=\"region\" // 색상을 keys 요소들에 각각 적용\r\n            // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n            theme={{\r\n              /**\r\n               * label style (bar에 표현되는 글씨)\r\n               */\r\n              labels: {\r\n                text: {\r\n                  fontSize: 12,\r\n                  fill: '#ffffff',\r\n                },\r\n              },\r\n              /**\r\n               * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              legends: {\r\n                text: {\r\n                  fontSize: 14,\r\n                  fill: '#000000',\r\n                },\r\n              },\r\n              axis: {\r\n                /**\r\n                 * axis legend style (bottom, left에 있는 글씨)\r\n                 */\r\n                // legend: {\r\n                //     text: {\r\n                //         fontSize: 18,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                /**\r\n                 * axis ticks style (bottom, left에 있는 값)\r\n                 */\r\n                ticks: {\r\n                  text: {\r\n                    fontSize: 14,\r\n                    fill: '#000000',\r\n                  },\r\n                },\r\n                domain: {\r\n                  line: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 1,\r\n                  },\r\n                },\r\n              },\r\n              grid: {\r\n                line: {\r\n                  stroke: '#EEEEEE',\r\n                  strokeWidth: 3,\r\n                  strokeDasharray: '4 4',\r\n                },\r\n              },\r\n            }}\r\n            /**\r\n             * axis bottom 설정\r\n             */\r\n            axisBottom={{\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: -45, // tick 기울기\r\n              legend: false, // bottom 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: 40, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * axis left 설정\r\n             */\r\n            axisLeft={{\r\n              // format: (value) => `${value} 명`, // 값에 단위 붙이기\r\n              tickValues: 5, // tick 개수\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 10, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              //legend: 'price', // left 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: -60, // 글씨와 chart간 간격\r\n              format: (v) => `${numberWithCommas(v)}`, // 값에 단위 붙이기\r\n            }}\r\n            /**\r\n             * label 안보이게 할 기준 width\r\n             */\r\n            // labelSkipWidth={36}\r\n            /**\r\n             * label 안보이게 할 기준 height\r\n             */\r\n            label={false}\r\n            tooltip={(e) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    background: '#FFFFFF',\r\n                    padding: '5px 16px',\r\n                    borderRadius: '4px',\r\n                    boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                    fontSize: '12px',\r\n                    fontWeight: 'bold',\r\n                    color: '#000000',\r\n                  }}\r\n                >\r\n                  {e.data.region} : {`${numberWithCommas(e.data.value)}명`} (\r\n                  {e.data?.formattedValue?.toFixed(2)}%)\r\n                </div>\r\n              );\r\n            }}\r\n            /**\r\n             * bar 클릭 이벤트\r\n             */\r\n            onClick={handle.barClick}\r\n            /**\r\n             * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n             */\r\n            borderRadius={5} // legend border radius\r\n            enableGridX={false} // x축 grid line\r\n            enableGridY={true} // y축 grid line\r\n            // legends={[\r\n            //     {\r\n            //         dataFrom: 'keys', // 보일 데이터 형태\r\n            //         anchor: 'top-right', // 위치\r\n            //         direction: 'row', // item 그려지는 방향\r\n            //         justify: false, // 글씨, 색상간 간격 justify 적용 여부\r\n            //         translateX: 0, // chart와 X 간격\r\n            //         translateY: -30, // chart와 Y 간격\r\n            //         itemsSpacing: 0, // item간 간격\r\n            //         itemWidth: 100, // item width\r\n            //         itemHeight: 0, // item height\r\n            //         itemDirection: 'left-to-right', // item 내부에 그려지는 방향\r\n            //         itemOpacity: 0.85, // item opacity\r\n            //         symbolSize: 20, // symbol (색상 표기) 크기\r\n            //         symbolShape: 'circle',\r\n            //         effects: [\r\n            //             {\r\n            //                 // 추가 효과 설정 (hover하면 item opacity 1로 변경)\r\n            //                 on: 'hover',\r\n            //                 style: {\r\n            //                     itemOpacity: 0.5,\r\n            //                 },\r\n            //             },\r\n            //         ],\r\n            //         onClick: handle.legendClick, // legend 클릭 이벤트\r\n            //     },\r\n            // ]}\r\n          />\r\n        )}\r\n        {state === 1 && dataB && (\r\n          <ResponsiveBar\r\n            {...props}\r\n            /**\r\n             * chart에 사용될 데이터\r\n             */\r\n            data={dataB}\r\n            /**\r\n             * chart에 보여질 데이터 key (측정되는 값)\r\n             */\r\n            keys={['value']}\r\n            /**\r\n             * keys들을 그룹화하는 index key (분류하는 값)\r\n             */\r\n            indexBy=\"region\"\r\n            /**\r\n             * chart margin\r\n             */\r\n            margin={{ top: 80, right: 50, bottom: 50, left: 70 }}\r\n            /**\r\n             * chart padding (bar간 간격)\r\n             */\r\n            padding={0.3}\r\n            /**\r\n             * chart 색상\r\n             */\r\n            colors={['#11BFEA']} // 커스텀하여 사용할 때\r\n            // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\r\n            /**\r\n             * color 적용 방식\r\n             */\r\n            colorBy=\"region\" // 색상을 keys 요소들에 각각 적용\r\n            // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\r\n            tooltip={(e) => {\r\n              return (\r\n                <div\r\n                  style={{\r\n                    background: '#FFFFFF',\r\n                    padding: '5px 16px',\r\n                    borderRadius: '4px',\r\n                    boxShadow: '0 0 10px rgba(0, 0, 0, 0.25)',\r\n                    fontSize: '12px',\r\n                    fontWeight: 'bold',\r\n                    color: '#000000',\r\n                  }}\r\n                >\r\n                  {e.data.region} : {numberWithCommas(e.data.value)}개 (\r\n                  {e.data?.formattedValue?.toFixed(2)}%)\r\n                </div>\r\n              );\r\n            }}\r\n            theme={{\r\n              /**\r\n               * label style (bar에 표현되는 글씨)\r\n               */\r\n              labels: {\r\n                text: {\r\n                  fontSize: 12,\r\n                  fill: '#ffffff',\r\n                },\r\n              },\r\n              /**\r\n               * legend style (default로 우측 하단에 있는 색상별 key 표시)\r\n               */\r\n              legends: {\r\n                text: {\r\n                  fontSize: 14,\r\n                  fill: '#000000',\r\n                },\r\n              },\r\n              axis: {\r\n                /**\r\n                 * axis legend style (bottom, left에 있는 글씨)\r\n                 */\r\n                // legend: {\r\n                //     text: {\r\n                //         fontSize: 18,\r\n                //         fill: '#000000',\r\n                //     },\r\n                // },\r\n                /**\r\n                 * axis ticks style (bottom, left에 있는 값)\r\n                 */\r\n                ticks: {\r\n                  text: {\r\n                    fontSize: 14,\r\n                    fill: '#000000',\r\n                  },\r\n                },\r\n                domain: {\r\n                  line: {\r\n                    stroke: '#000000',\r\n                    strokeWidth: 1,\r\n                  },\r\n                },\r\n              },\r\n              grid: {\r\n                line: {\r\n                  stroke: '#EEEEEE',\r\n                  strokeWidth: 3,\r\n                  strokeDasharray: '4 4',\r\n                },\r\n              },\r\n            }}\r\n            /**\r\n             * axis bottom 설정\r\n             */\r\n            axisBottom={{\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 5, // tick padding\r\n              tickRotation: -45, // tick 기울기\r\n              legend: false, // bottom 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: 40, // 글씨와 chart간 간격\r\n            }}\r\n            /**\r\n             * axis left 설정\r\n             */\r\n            axisLeft={{\r\n              // format: (value) => `${value}`, // 값에 단위 붙이기\r\n              tickValues: 5, // tick 개수\r\n              tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\r\n              tickPadding: 10, // tick padding\r\n              tickRotation: 0, // tick 기울기\r\n              //legend: 'price', // left 글씨\r\n              legendPosition: 'middle', // 글씨 위치\r\n              legendOffset: -60, // 글씨와 chart간 간격\r\n              format: (v) => `${numberWithCommas(v)}`, // 값에 단위 붙이기\r\n            }}\r\n            /**\r\n             * label 안보이게 할 기준 width\r\n             */\r\n            // labelSkipWidth={36}\r\n            /**\r\n             * label 안보이게 할 기준 height\r\n             */\r\n            label={false}\r\n            /**\r\n             * bar 클릭 이벤트\r\n             */\r\n            onClick={handle.barClick}\r\n            /**\r\n             * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\r\n             */\r\n            borderRadius={5} // legend border radius\r\n            enableGridX={false} // x축 grid line\r\n            enableGridY={true} // y축 grid line\r\n            // legends={[\r\n            //     {\r\n            //         dataFrom: 'keys', // 보일 데이터 형태\r\n            //         anchor: 'top-right', // 위치\r\n            //         direction: 'row', // item 그려지는 방향\r\n            //         justify: false, // 글씨, 색상간 간격 justify 적용 여부\r\n            //         translateX: 0, // chart와 X 간격\r\n            //         translateY: -30, // chart와 Y 간격\r\n            //         itemsSpacing: 0, // item간 간격\r\n            //         itemWidth: 100, // item width\r\n            //         itemHeight: 0, // item height\r\n            //         itemDirection: 'left-to-right', // item 내부에 그려지는 방향\r\n            //         itemOpacity: 0.85, // item opacity\r\n            //         symbolSize: 20, // symbol (색상 표기) 크기\r\n            //         symbolShape: 'circle',\r\n            //         effects: [\r\n            //             {\r\n            //                 // 추가 효과 설정 (hover하면 item opacity 1로 변경)\r\n            //                 on: 'hover',\r\n            //                 style: {\r\n            //                     itemOpacity: 0.5,\r\n            //                 },\r\n            //             },\r\n            //         ],\r\n            //         onClick: handle.legendClick, // legend 클릭 이벤트\r\n            //     },\r\n            // ]}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChart;","import { useQuery } from '@tanstack/react-query'\r\nimport React from 'react'\r\nimport { getDojangCountStatistic, getStudentCountStatistic } from '../../../../api/Association/statisticAPI'\r\nimport BarChart from '../../../../components/common/NivoCharts/BarChart'\r\nimport { useDebug } from '../../../../hooks/basic/useDebug'\r\n\r\nconst StudentDojangStatistic = ({ year, month, region }) => {\r\n\r\n  // query\r\n  const { data: studentCntData } = useQuery(['getStudentCountStatistic', year, month, region], () => getStudentCountStatistic(year, month, region), {\r\n    enabled: !!year && !!month && !!region,\r\n    select: (res) => {\r\n      let temp = res.map((v) => {\r\n        return (\r\n          {\r\n            region: v.depth_2,\r\n            label: '수련생 수',\r\n            value: v.stu_count,\r\n          }\r\n        )\r\n      })\r\n      return temp\r\n    }\r\n  })\r\n\r\n  const { data: dojangCntData } = useQuery(['getDojangCountStatistic', year, month, region], () => getDojangCountStatistic(year, month, region), {\r\n    enabled: !!year && !!month && !!region,\r\n    select: (res) => {\r\n      let temp = res.map((v) => {\r\n        return (\r\n          {\r\n            region: v.depth_2,\r\n            label: '도장 수',\r\n            value: v.dojang_count,\r\n          }\r\n        )\r\n      })\r\n      return temp\r\n    }\r\n  })\r\n\r\n  // useDebug(dojangCntData)\r\n\r\n  return (\r\n    <>\r\n      <BarChart data1={studentCntData} data2={dojangCntData} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StudentDojangStatistic","\r\n// ID 체크\r\nconst idRegex = new RegExp(/^[a-z0-9_]{6,20}$/);\r\n\r\n// 한글+영문 2글자 이상 20글자 이하 체크\r\nconst nameRegex = new RegExp(/^[가-힣]{1,6}$/);\r\n\r\n// 성 regex 체크\r\nconst lastNameRegex = new RegExp(/^[가-힣]{1,3}$/);\r\n\r\n//email형식 체크\r\nconst emailRegex = new RegExp(/(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/);\r\n\r\n// 비밀번호 영어소문자+숫자+글자수(6글자 이상, 20글자 이하) 체크\r\nconst passwordRegex = new RegExp(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d\\w\\W]{8,20}$/);\r\n\r\n// 비밀번호 일치 확인\r\nconst passwordConfirmRegex = (password, passwordConfirm) => {\r\n    return password === passwordConfirm;\r\n};\r\n\r\n// 휴대폰번호 형식 체크\r\nconst phoneRegex = new RegExp(/^\\d{3}-\\d{3,4}-\\d{4}$/);\r\n\r\n// 숫자만 입력받기\r\nconst numberRegex = (value) => {\r\n  return value.replace(/[^0-9]/g, '');\r\n};\r\n\r\n// 휴대폰번호 하이폰(-) 정규식\r\nconst phoneHyphenRegex = (phone) => {\r\n  return phone && phone?.replace(/[^0-9]/g, '')\r\n  ?.replace(/^(\\d{0,3})(\\d{0,4})(\\d{0,4})$/g, \"$1-$2-$3\")\r\n  ?.replace(/(\\-{1,2})$/g, \"\");\r\n};\r\n\r\n// 숫자 1000단위 콤마 찍기 함수\r\nconst numberWithCommas = (value) => {\r\n  return value\r\n    \t.toString()\r\n      .replace(/(\\..*)$|(\\d)(?=(\\d{3})+(?!\\d))/g, (digit, fract) => fract || digit + ',');\r\n};\r\n\r\n// 사업자 등록 번호 하이폰(-) 정규식\r\nconst businessNumberHyphenRegex = (businessNumber) => {\r\n  return businessNumber && businessNumber?.replace(/[^0-9]/g, '')\r\n  ?.replace(/^(\\d{0,3})(\\d{0,2})(\\d{0,5})$/g, \"$1-$2-$3\")\r\n  ?.replace(/(\\-{1,2})$/g, \"\");\r\n};\r\n\r\n\r\n\r\nexport { \r\n  idRegex, \r\n  nameRegex, \r\n  lastNameRegex,\r\n  emailRegex, \r\n  passwordRegex, \r\n  numberRegex,\r\n  phoneRegex, \r\n  phoneHyphenRegex,\r\n  passwordConfirmRegex,\r\n  numberWithCommas,\r\n  businessNumberHyphenRegex,\r\n};"],"names":["getASUserCount","year","region","authApi","res","data","getAgeStatistic","month","getGenderStatistic","getStudentCountStatistic","getDojangCountStatistic","getLevelStudentStatistic","getLevelupStudentStatistic","getPoomStudentStatistic","getPoomUpStudentStatistic","data1","data2","props","useState","state","setState","dataA","setDataA","dataB","setDataB","useEffect","data1Sum","reduce","acc","cur","value","data2Sum","tempA","map","item","formattedValue","tempB","handle","barClick","legendClick","style","width","height","margin","position","onClick","color","fontSize","fontWeight","paddingBottom","top","left","zIndex","cursor","borderBottom","keys","indexBy","right","bottom","padding","colors","colorBy","theme","labels","text","fill","legends","axis","ticks","domain","line","stroke","strokeWidth","grid","strokeDasharray","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","tickValues","format","v","numberWithCommas","label","tooltip","e","background","borderRadius","boxShadow","toFixed","enableGridX","enableGridY","studentCntData","useQuery","enabled","select","depth_2","stu_count","dojangCntData","dojang_count","idRegex","RegExp","nameRegex","lastNameRegex","emailRegex","passwordRegex","passwordConfirmRegex","password","passwordConfirm","phoneRegex","numberRegex","replace","phoneHyphenRegex","phone","toString","digit","fract","businessNumberHyphenRegex","businessNumber"],"sourceRoot":""}