{"version":3,"file":"static/js/8394.d978c93e.chunk.js","mappings":"+dAAaA,EACA,EADAA,EAEE,IAFFA,EAGO,ECyBPC,EAAqB,SAC9BC,GAAAA,MACwE,WAAxBA,EAAeC,IAAAA,EAEtDC,EAAkB,SAC3BF,GAAAA,MACqE,QAAxBA,EAAeC,IAAAA,EAEnDE,EAAmB,SAC5BH,GAAAA,MACsE,SAAxBA,EAAeC,IAAAA,ECmDpDG,EAAoB,SAC7BC,GAAAA,IAWIC,EACAC,EATAC,EAMAH,EANAG,EACAC,EAKAJ,EALAI,EACAC,EAIAL,EAJAK,MACAC,EAGAN,EAHAM,MAAAA,EAGAN,EAFAO,UAAAA,OAAAA,IAAAA,EAAYd,EAAac,EAAAA,EAEzBP,EADAQ,eAAAA,OAAAA,IAAAA,EAAiBf,EAAae,EAAAA,GAM9BC,IAASJ,GACTJ,EAAgBE,EAAIE,MACjB,SAAI,IAAAA,EAAMK,IAAAA,MAGP,IAAIC,MAAM,6EAFhBV,EAAgBI,EAAMK,GAAAA,CAAAA,GAKtBD,IAASH,GACTJ,EAAgBE,EAAIE,MACjB,SAAI,IAAAA,EAAMI,IAAAA,MAGP,IAAIC,MAAM,6EAFhBT,EAAgBI,EAAMI,GAAAA,CAAAA,IAKtBE,EAAYT,EACZU,EAAYT,EAEVU,EA7CkB,SACxBC,EACAC,EACAC,EACAC,GAAAA,IAEMJ,EAAQK,KAAKC,MAAMF,EAAUF,EAASC,EAAUF,GAAAA,OAE/CM,EAAAA,EAAAA,KAAqBC,EAAAA,EAAAA,IAAiBR,GAAAA,CAqC/BS,CAAapB,EAAGC,EAAGH,EAAeC,GAAAA,GAE5CR,EAA0BM,GAAa,KACjCwB,GAAWC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,IAAiBZ,GAAQd,EAAW2B,KAAO,GAC9Ef,GAAaY,EAASrB,EACtBU,GAAaW,EAASpB,CAAAA,CAAAA,GAGtBN,EAAwBE,GAAa,KAC/B4B,EAAST,KAAKU,OAAOf,EAAQ,IAAM,IAAM,EAChC,IAAXc,IACAf,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,GAErB,IAAXH,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAf,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,GAEtB,IAAXF,IACAhB,GAAaZ,EAAW+B,MAAQ,GAErB,IAAXH,IACAhB,GAAaZ,EAAW+B,MAAQ,EAChClB,GAAab,EAAW8B,OAAS,OAIrCE,EAAQ/B,EAGRgC,EAAYhC,EAAAA,OAGXa,EAAQ,IAAM,IAAM,KACrBkB,GAASzB,EACT0B,GAAa1B,GAEb0B,GAAa1B,EAGV,CACH2B,OAAQ,CACJ,CAACtB,EAAWC,GACZ,CAACZ,EAAeC,GAChB,CAAC+B,EAbS/B,IAediC,KAAM,CAACH,EAlBG9B,EAAgBM,GAmB1BM,MAAOA,EAAQ,KC3KVsB,EAAiB,SAAAC,GAAA,IAC1BC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,cAAAA,OAOAC,EAAAA,EAAAA,UACI,kBDPuB,SAAAL,GAAA,IAM3BC,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,cAAAA,OAOAF,EAAYI,QAAO,SAACC,EAA+B5C,GAAAA,IACzC6C,EAAS7C,EAAW6C,QAAU,kBAG7BD,EACAE,IAAcR,EAAMtC,EAAW+C,OAAOC,KAAI,YAAAC,IACnCzB,EAAWgB,EAAYS,GACvBC,EAAaT,EAAcQ,GAAAA,OAE7BvD,EAAmBM,IAAeF,EAAiBE,MACnDkD,EAAWvB,KAAOuB,EAAWvB,KAAgB,EAATkB,EACpCK,EAAWnB,MAAQmB,EAAWnB,MAAiB,EAATc,EACtCK,EAAWpB,OAASoB,EAAWpB,OAAkB,EAATe,GAAAA,EAAAA,CAAAA,EAqBrCM,IAAKnD,EAAY,CAAC,QAAS,WAC3BwB,EACA0B,EAAAA,CACHvB,KAAM3B,EAAW2B,MAAQuB,EAAWvB,KACpCsB,MAAAA,GAAAA,IAAAA,GAMb,ICnDKG,CAAuB,CACnBd,KAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,cAAAA,GAAAA,GAER,CAACH,EAAMC,EAAaC,EAAaC,GAAAA,EAG5BY,EAAyB,SAAAhB,GAAA,IAClCE,EAAAA,EAAAA,YAAAA,OAIAG,EAAAA,EAAAA,UACI,kBACIH,EAAYS,KAAI,YAAAhD,OAAAA,EAAAA,CAAAA,EACTA,EAAAA,CACHsD,SAAUvD,EAAAA,EAAAA,CAAAA,EACHC,KAAAA,GAAAA,GAGf,CAACuC,GAAAA,ECzCIgB,EAAiB,SAAAlB,GAAA,IAC1BY,EAAAA,EAAAA,MACA9C,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACAoD,EAAAA,EAAAA,KAOMC,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B7D,EAAAA,EACAC,EAAAA,EACA0D,OAAQD,EACRI,WAAYL,IAAAA,MAGI,mBAATJ,GACAU,EAAAA,EAAAA,eAAcV,EAAM,CAAErD,EAAAA,EAAGC,EAAAA,EAAG6C,MAAAA,KAInCkB,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYJ,KAAKiC,aAAe,IACnCC,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAanC,CACVhC,EAAG4D,EAAc5D,EACjBC,EAAG2D,EAAc3D,EACjBmE,MAAAA,EAAAA,CAAAA,EACOd,EAAMlB,YAAYJ,KAAAA,CACrBqC,eAAgB,QAChBC,YAAmD,EAAtChB,EAAMlB,YAAYJ,KAAKiC,aACpCM,OAAQjB,EAAMlB,YAAYJ,KAAKwC,eAAAA,SAGlCnB,KAGTa,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAanC,CACVhC,EAAG4D,EAAc5D,EACjBC,EAAG2D,EAAc3D,EACjBmE,MAAOK,IAAKnB,EAAMlB,YAAYJ,KAAM,CAAC,eAAgB,iBAAA0C,SAEpDrB,MAAAA,EChDJsB,EAAiB,SAAAzC,GAAA,IAC1BH,EAAAA,EAAAA,OAAAA,EAAAA,EACA6C,UAAAA,OAAAA,IAAAA,GAAAA,EAKMtB,GAAQC,EAAAA,EAAAA,MAERsB,GAAOtC,EAAAA,EAAAA,UAAQ,eACVuC,EAA8B/C,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,GAElBS,QACf,SAACC,EAAAA,GAAAA,OAAmBA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,GAAAA,IAChBqC,EAAW,OAAMA,EAAW,MAErC,CAAC/C,IAEEgD,GAAeC,EAAAA,EAAAA,IAAgBH,GAAAA,GAEjCD,GAAatB,EAAMlB,YAAY6C,KAAKhB,cAAgB,EAAG,OAChD,SAGLG,EAAAA,EAAAA,CAAAA,EAAad,EAAMlB,YAAY6C,MAAAA,OACjCL,IACAR,EAAMc,cAAgB,SACtBd,EAAME,YACFhB,EAAMlB,YAAY6C,KAAKX,YAAoD,EAAtChB,EAAMlB,YAAY6C,KAAKhB,aAChEG,EAAMG,OAASjB,EAAMlB,YAAY6C,KAAKT,aACtCJ,EAAMe,QAAU7B,EAAMlB,YAAY6C,KAAKG,iBAGpClB,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAaU,CAACQ,KAAK,OAAOC,EAAGP,EAAcX,MAAOA,GAAAA,EClCjDmB,EAA0B,SAAArD,GAAA,IAAGlC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGuB,EAAAA,EAAAA,KACtC8B,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B7D,EAAAA,EACAC,EAAAA,EACAuF,OAAQhE,EAAO,EACfmC,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYqD,QAAQxB,aAAe,IACtCC,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,OAAeuB,CACZC,GAAI/B,EAAc5D,EAClB4F,GAAIhC,EAAc3D,EAClB4F,EAAGjC,EAAc4B,OACjBpB,MAAAA,EAAAA,CAAAA,EACOd,EAAMlB,YAAYqD,QAAAA,CACrBJ,KAAM,OACNf,YACIhB,EAAMlB,YAAYqD,QAAQnB,YACe,EAAzChB,EAAMlB,YAAYqD,QAAQxB,aAC9BM,OAAQjB,EAAMlB,YAAYqD,QAAQjB,aAClCW,QAAS7B,EAAMlB,YAAYqD,QAAQL,oBAI/ClB,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,OAAeuB,CACZC,GAAI/B,EAAc5D,EAClB4F,GAAIhC,EAAc3D,EAClB4F,EAAGjC,EAAc4B,OACjBpB,MAAOd,EAAMlB,YAAYqD,YAAAA,ECjC5BK,EAAuB,SAAA5D,GAAA,IAChClC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAAAA,EAAAA,EACAuB,KAAAA,OAAAA,IAAAA,EAAOlC,EAAayG,EAMdzC,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B7D,EAAAA,EACAC,EAAAA,EACAuF,OAAQhE,EAAO,EACfmC,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYqD,QAAQxB,aAAe,IACtCC,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,OAAeuB,CACZC,GAAI/B,EAAc5D,EAClB4F,GAAIhC,EAAc3D,EAClB4F,EAAGjC,EAAc4B,OACjBpB,MAAAA,EAAAA,CAAAA,EACOd,EAAMlB,YAAYqD,QAAAA,CACrBJ,KAAM,OACNf,YAAsD,EAAzChB,EAAMlB,YAAYqD,QAAQxB,aACvCM,OAAQjB,EAAMlB,YAAYqD,QAAQjB,aAClCW,QAAS7B,EAAMlB,YAAYqD,QAAQL,oBAI/ClB,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,OAAeuB,CACZC,GAAI/B,EAAc5D,EAClB4F,GAAIhC,EAAc3D,EAClB4F,EAAGjC,EAAc4B,OACjBpB,MAAOd,EAAMlB,YAAY4D,WAAAA,ECzC5BC,EAAwB,SAAA/D,GAAA,IACjClC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACA2B,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAAAA,EAAAA,EACAuE,aAAAA,OAAAA,IAAAA,EAAe,IAQT5C,GAAQC,EAAAA,EAAAA,MAAAA,GAC4BC,EAAAA,EAAAA,MAAlCC,EAAAA,EAAAA,QAAiBC,EAAAA,EAARC,OAEXC,GAAgBC,EAAAA,EAAAA,WAAU,CAC5B7D,EAAGA,EAAI4B,EAAQ,EACf3B,EAAGA,EAAI0B,EAAS,EAChBC,MAAAA,EACAD,OAAAA,EACAgC,OAAQD,EACRI,WAAYL,IAAAA,OAIZO,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,CACKV,EAAMlB,YAAYqD,QAAQxB,aAAe,IACtCC,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAagC,CACVnG,EAAG4D,EAAc5D,EACjBC,EAAG2D,EAAc3D,EACjBmG,GAAIF,EACJG,GAAIH,EACJtE,MAAOgC,EAAchC,MACrBD,OAAQiC,EAAcjC,OACtByC,MAAAA,EAAAA,CAAAA,EACOd,EAAMlB,YAAYqD,QAAAA,CACrBJ,KAAM,OACNf,YACIhB,EAAMlB,YAAYqD,QAAQnB,YACe,EAAzChB,EAAMlB,YAAYqD,QAAQxB,aAC9BM,OAAQjB,EAAMlB,YAAYqD,QAAQjB,aAClCW,QAAS7B,EAAMlB,YAAYqD,QAAQL,oBAI/ClB,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAagC,CACVnG,EAAG4D,EAAc5D,EACjBC,EAAG2D,EAAc3D,EACjBmG,GAAIF,EACJG,GAAIH,EACJtE,MAAOgC,EAAchC,MACrBD,OAAQiC,EAAcjC,OACtByC,MAAOd,EAAMlB,YAAYqD,YAAAA,EC/C5Ba,EAAa,SAASzG,GAAAA,IACvBiD,EAAsBjD,EAAtBiD,MAAO9C,EAAeH,EAAfG,EAAGC,EAAYJ,EAAZI,EAAGoD,EAASxD,EAATwD,KACfF,ENuC2B,SAAQtD,GAAAA,OACzC0C,EAAAA,EAAAA,UAAQ,kBAAM3C,EAAyBC,EAAAA,GAAa,CAACA,GAAAA,CMxCpC0G,CAAsB1G,GAAAA,IRAlB,SAAQwD,GAAAA,IACvBmD,SAAkBnD,EAAAA,OAGpBoD,EAAAA,EAAAA,gBAAepD,IACF,WAAbmD,GACa,aAAbA,GACa,WAAbA,CAAAA,CQLCE,CAAUrD,GAAAA,MACL,IAAI7C,MAAM,+CAIhBwD,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACIE,EAAAA,EAAAA,KAACS,EAAAA,CAAe5C,OAAQoB,EAASpB,OAAQ6C,WAAAA,IACxCrF,EAAmBM,KAChBqE,EAAAA,EAAAA,KAACqB,EAAAA,CAAwBvF,EAAGA,EAAGC,EAAGA,EAAGuB,KAAM3B,EAAW2B,OAEzD9B,EAAgBG,KACbqE,EAAAA,EAAAA,KAAC4B,EAAAA,CAAqB9F,EAAGA,EAAGC,EAAGA,EAAGuB,KAAM3B,EAAW2B,OAEtD7B,EAAiBE,KACdqE,EAAAA,EAAAA,KAAC+B,EAAAA,CACGjG,EAAGA,EACHC,EAAGA,EACH2B,MAAO/B,EAAW+B,MAClBD,OAAQ9B,EAAW8B,OACnBuE,aAAcrG,EAAWqG,gBAGjChC,EAAAA,EAAAA,KAACS,EAAAA,CAAe5C,OAAQoB,EAASpB,UACjCmC,EAAAA,EAAAA,KAACd,EAAAA,CAAeN,MAAOA,EAAO9C,EAAGmD,EAASnB,KAAK,GAAI/B,EAAGkD,EAASnB,KAAK,GAAIqB,KAAMA,MAAAA,EChCpFsD,EAAa,SAACC,EAA+B7E,GAC/CA,EAAO8E,SAAQ,WAASC,GAAAA,IAAP9G,EAAAA,EAAAA,GAAGC,EAAAA,EAAAA,GACF,IAAV6G,EACAF,EAAIG,OAAO/G,EAAGC,GAEd2G,EAAII,OAAOhH,EAAGC,EAAAA,GAAAA,EAKbgH,EAA4B,SACrCL,EAAAA,GAAAA,IAEIxE,EAAAA,EAAAA,YACAkB,EAAAA,EAAAA,MAMuB,IAAvBlB,EAAY8E,SAEhBN,EAAIO,OACJ/E,EAAYyE,SAAQ,YAAAhH,ITLI,SAAQwD,GAAAA,IAC1BmD,SAAkBnD,EAAAA,MAEJ,WAAbmD,GAAsC,aAAbA,CAAAA,CSGvBY,CAAavH,EAAWwD,MAAO,MAC1B,IAAI7C,MAAM,6CAGhB8C,EAAMlB,YAAY6C,KAAKhB,aAAe,IACtC2C,EAAIS,QAAU,SACdT,EAAIU,YAAchE,EAAMlB,YAAY6C,KAAKT,aACzCoC,EAAIW,UACAjE,EAAMlB,YAAY6C,KAAKX,YAAoD,EAAtChB,EAAMlB,YAAY6C,KAAKhB,aAChE2C,EAAIY,YACJb,EAAWC,EAAK/G,EAAWsD,SAASpB,QACpC6E,EAAIrC,SACJqC,EAAIS,QAAU,QAGd9H,EAAmBM,IAAeyD,EAAMlB,YAAYqD,QAAQxB,aAAe,IAC3E2C,EAAIU,YAAchE,EAAMlB,YAAYqD,QAAQjB,aAC5CoC,EAAIW,UACAjE,EAAMlB,YAAYqD,QAAQnB,YAAuD,EAAzChB,EAAMlB,YAAYqD,QAAQxB,aACtE2C,EAAIY,YACJZ,EAAIa,IAAI5H,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAK0G,IACrEd,EAAIrC,UAGJ7E,EAAgBG,IAAeyD,EAAMlB,YAAY4D,OAAO/B,aAAe,IACvE2C,EAAIU,YAAchE,EAAMlB,YAAY4D,OAAOxB,aAC3CoC,EAAIW,UAAoD,EAAxCjE,EAAMlB,YAAY4D,OAAO/B,aACzC2C,EAAIY,YACJZ,EAAIa,IAAI5H,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAK0G,IACrEd,EAAIrC,UAGJ5E,EAAiBE,IAAeyD,EAAMlB,YAAYqD,QAAQxB,aAAe,IACzE2C,EAAIU,YAAchE,EAAMlB,YAAYqD,QAAQjB,aAC5CoC,EAAIW,UACAjE,EAAMlB,YAAYqD,QAAQnB,YAAuD,EAAzChB,EAAMlB,YAAYqD,QAAQxB,aACtE2C,EAAIY,YACJZ,EAAIT,KACAtG,EAAWG,EAAIH,EAAW+B,MAAQ,EAClC/B,EAAWI,EAAIJ,EAAW8B,OAAS,EACnC9B,EAAW+B,MACX/B,EAAW8B,QAEfiF,EAAIrC,UAGRqC,EAAIU,YAAchE,EAAMlB,YAAY6C,KAAKV,OACzCqC,EAAIW,UAAYjE,EAAMlB,YAAY6C,KAAKX,YACvCsC,EAAIY,YACJb,EAAWC,EAAK/G,EAAWsD,SAASpB,QACpC6E,EAAIrC,SAEAhF,EAAmBM,KACnB+G,EAAIU,YAAchE,EAAMlB,YAAYqD,QAAQlB,OAC5CqC,EAAIW,UAAYjE,EAAMlB,YAAYqD,QAAQnB,YAC1CsC,EAAIY,YACJZ,EAAIa,IAAI5H,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAK0G,IACrEd,EAAIrC,UAGJ7E,EAAgBG,KAChB+G,EAAIe,UAAYrE,EAAMlB,YAAY4D,OAAOX,KACzCuB,EAAIY,YACJZ,EAAIa,IAAI5H,EAAWG,EAAGH,EAAWI,EAAGJ,EAAW2B,KAAO,EAAG,EAAG,EAAIR,KAAK0G,IACrEd,EAAIvB,QAGJ1F,EAAiBE,KACjB+G,EAAIU,YAAchE,EAAMlB,YAAYqD,QAAQlB,OAC5CqC,EAAIW,UAAYjE,EAAMlB,YAAYqD,QAAQnB,YAC1CsC,EAAIY,YACJZ,EAAIT,KACAtG,EAAWG,EAAIH,EAAW+B,MAAQ,EAClC/B,EAAWI,EAAIJ,EAAW8B,OAAS,EACnC9B,EAAW+B,MACX/B,EAAW8B,QAEfiF,EAAIrC,UAGuB,mBAApB1E,EAAWwD,KAClBxD,EAAWwD,KAAKuD,EAAK,CACjB9D,MAAOjD,EAAWiD,MAClB9C,EAAGH,EAAWsD,SAASnB,KAAK,GAC5B/B,EAAGJ,EAAWsD,SAASnB,KAAK,GAC5BsB,MAAAA,KAGJsD,EAAIgB,KAAUtE,EAAMlB,YAAYJ,KAAK6F,SAAAA,MAAcvE,EAAMlB,YAAYJ,KAAK8F,WAC1ElB,EAAImB,UAAY,OAChBnB,EAAIoB,aAAe,aAEnBpB,EAAIe,UAAYrE,EAAMlB,YAAYJ,KAAKqD,KACvCuB,EAAIU,YAAchE,EAAMlB,YAAYJ,KAAKwC,aACzCoC,EAAIW,UAAkD,EAAtCjE,EAAMlB,YAAYJ,KAAKiC,aAEnCX,EAAMlB,YAAYJ,KAAKiC,aAAe,IACtC2C,EAAIqB,SAAW,QACfrB,EAAIsB,WACArI,EAAWwD,KACXxD,EAAWsD,SAASnB,KAAK,GACzBnC,EAAWsD,SAASnB,KAAK,IAE7B4E,EAAIqB,SAAW,SAEnBrB,EAAIuB,SAAStI,EAAWwD,KAAMxD,EAAWsD,SAASnB,KAAK,GAAInC,EAAWsD,SAASnB,KAAK,QAG5F4E,EAAIwB,UAAAA,E,4aCrID,MAAMC,EAAiB,SAAAC,GAAA,IAAcC,EAAAA,EAAAA,KAAMnG,EAAAA,EAAAA,YACxCoG,EAAmBvG,EAAe,CACpCE,KAAMoG,EACNnG,YAAAA,EACAC,YAAa,YAAAoG,MAAQ,CACjBzI,EAAGyI,EAAIzI,EAAIyI,EAAI7G,MAAQ,EACvB3B,EAAGwI,EAAIxI,EAAIwI,EAAI9G,OAAS,IAE5BW,cAAe,gBAAGX,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,MAAAA,MAAa,CACnCA,MAAAA,EACAD,OAAAA,EACAH,KAAMR,KAAK0H,IAAI9G,EAAOD,GAAAA,IAAAA,OAK1BuC,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACKsE,EAAiB3F,KAAI,SAAChD,EAAY8I,GAAAA,OAC/BzE,EAAAA,EAAAA,KAACoC,EAAAA,EAAAA,CAAAA,EAAuBzG,GAAP8I,EAAAA,KAAAA,ECXpBC,EAAa,SAAAN,GAAA,IAAG1G,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAQkH,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,YAAAA,OACjD5E,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACK2E,EAAQhG,KAAI,WAAiB8F,GAAAA,IAAAA,EAAfI,EAAAA,EAAAA,GAAQ5G,EAAAA,EAAAA,GAAAA,OACnB+B,EAAAA,EAAAA,KAAC8E,EAAAA,GAAAA,EAAAA,CAAAA,EAEOD,EAAAA,CACJE,eAAgBrH,EAChBsH,gBAAiBvH,EACjBQ,KAAAA,OAAAA,EAAM4G,EAAO5G,MAAAA,EAAQA,EACrB2G,YACIC,EAAOD,aAAmC,SAApBC,EAAOI,SAAsBL,OAAAA,IANlDH,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,QCqGAS,EAAAA,CAAAA,QAAAA,SC7GR9J,EAAe,CACxB+J,QAAS,KACTC,KAAM,CAAC,SAEPC,UAAW,UACXC,OAAQ,WACRC,SAAS,EAETC,SAAU,OACVC,SAAU,OAEVC,WAAY,CAAEnK,KAAM,UACpBoK,WAAY,CAAEpK,KAAM,OAAQiC,OAAO,GAEnCoI,QAAS,GACTC,aAAc,EAEdC,WAAY,CAAC,EACbC,SAAU,CAAC,EACXC,aAAa,EACbC,aAAa,EAEbC,aAAa,EACbhB,MAAO,iBACPiB,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,CAAEC,KAAM,QAASlH,MAAO,oBAExCmH,QAAS,KACTC,OAAQ,CAAEC,OAAQ,QAElBzE,aAAc,EACd0E,YAAa,EACbC,YAAa,CAAEL,KAAM,SAErBM,eAAe,EACfC,QCvCsB,gBAAcC,EAAAA,EAAAA,MAAO5B,EAAAA,EAAAA,MAAUjH,EAAAA,EAAAA,EAAAA,GAAAA,OAC9C+B,EAAAA,EAAAA,KAAC+G,EAAAA,GAAAA,CAAaC,GAAI9B,EAAO+B,MAAOhJ,EAAKiJ,eAAgBC,YAAAA,EAAkBL,MAAOA,GAAAA,EDuCrFM,aAAc,SAAWxI,GAAAA,OAAsCA,EAAMoI,GAAAA,MAAQpI,EAAMyI,UAAAA,EAEnF1C,QAAS,GACT2C,iBAAkB,GAClBpJ,YAAa,GACbqJ,QAAS,IAGAC,EAAAA,EAAAA,CAAAA,EACNpM,EAAAA,CACHqM,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,UAAW,eACvDC,aDhDmB,kBAAAjD,EAAAA,EACnBF,IAAOtG,EAAAA,EAAAA,KAASsG,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAEhBrE,MACIyG,EAAAA,EAAAA,YACAG,EAAAA,EAAAA,MACArJ,EAAAA,EAAAA,OACAkK,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UACArK,EAAAA,EAAAA,MAGJsE,EAAAA,EAAAA,aACA0E,EAAAA,EAAAA,YAEAxB,EAAAA,EAAAA,MACA8C,EAAAA,EAAAA,kBAEApB,EAAAA,EAAAA,cACAqB,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aAEAtB,EAAAA,EAAAA,QAEAuB,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAEMnJ,GAAQC,EAAAA,EAAAA,MAAAA,GAC+CmJ,EAAAA,EAAAA,MAArDC,EAAAA,EAAAA,qBAAsBC,EAAAA,EAAAA,cAAeC,EAAAA,EAAAA,YAEvCC,GAAgBvK,EAAAA,EAAAA,UAClB,kBAAM,kBAAMwB,EAAAA,EAAAA,eAAcgH,EAAAA,EAAAA,CAAAA,EAActC,EAAQtG,GAAAA,CAAAA,GAChD,CAAC4I,EAAStC,EAAKtG,IAGb4K,GAAcC,EAAAA,EAAAA,cAChB,SAACC,GAAAA,MACGd,GAAAA,EAAAA,EAAAA,CAAYnB,MAAOvC,EAAIuC,OAAU7I,GAAQ8K,EAAAA,GAE7C,CAACxE,EAAKtG,EAAMgK,IAEVe,GAAgBF,EAAAA,EAAAA,cAClB,SAACC,GAAAA,OAAsCN,EAAqBG,IAAiBG,EAAAA,GAC7E,CAACN,EAAsBG,IAErBK,GAAmBH,EAAAA,EAAAA,cACrB,SAACC,GAAAA,MACGb,GAAAA,EAAejK,EAAM8K,GACrBN,EAAqBG,IAAiBG,EAAAA,GAE1C,CAAC9K,EAAMiK,EAAcO,EAAsBG,IAEzCM,GAAmBJ,EAAAA,EAAAA,cACrB,SAACC,GAAAA,MACGZ,GAAAA,EAAelK,EAAM8K,GACrBJ,GAAAA,GAEJ,CAAC1K,EAAM0K,EAAaR,IAIlBgB,GAAcL,EAAAA,EAAAA,cAAY,WAC5BJ,EAAcE,IAAiB,CAACrE,EAAI6E,KAAO7E,EAAI7G,MAAQ,EAAG6G,EAAI8E,MAAAA,GAC/D,CAACX,EAAeE,EAAerE,IAC5B+E,GAAaR,EAAAA,EAAAA,cAAY,WAC3BH,GAAAA,GACD,CAACA,IAAAA,OAGA7I,EAAAA,EAAAA,MAACG,EAAAA,SAAAA,EAAUsJ,CAACxB,UAAWA,EAAAA,SAAAA,EACnB/H,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAagC,CACVvE,OAAO8L,EAAAA,EAAAA,IAAG9L,GAAO,YAAAuJ,OAASnK,KAAK0H,IAAIyC,EAAO,MAC1CxJ,QAAQ+L,EAAAA,EAAAA,IAAG/L,GAAQ,YAAAwJ,OAASnK,KAAK0H,IAAIyC,EAAO,MAC5C/E,GAAIF,EACJG,GAAIH,EACJb,KAAAA,OAAAA,EAAMlD,EAAKkD,MAAAA,EAAQ2F,EACnB1G,YAAasG,EACbrG,OAAQsG,EACR8C,UAAWrB,EACXsB,SAAUtB,EAAc,OAAI,EAAAuB,aAChBtB,EAAYA,EAAUpK,QAAAA,EAAQ0L,kBACzBrB,EAAiBA,EAAerK,QAAAA,EAAQ0L,mBACvCpB,EAAkBA,EAAgBtK,QAAAA,EACpDiK,aAActB,EAAgBqC,OAAAA,EAC9BW,YAAahD,EAAgBoC,OAAAA,EAC7Bb,aAAcvB,EAAgBsC,OAAAA,EAC9BjB,QAASrB,EAAgBiC,OAAAA,EACzBgB,QAASjD,GAAiBwB,EAAce,OAAAA,EACxCW,OAAQlD,GAAiBwB,EAAckB,OAAAA,IAE1CtB,IACGhI,EAAAA,EAAAA,KAACC,EAAAA,SAAAA,KAAanC,CACVhC,EAAG+L,EACH9L,EAAG+L,EACHiC,WAAW,SACXC,iBAAiB,UACjBC,YAAarC,EACb1H,MAAAA,EAAAA,CAAAA,EACOd,EAAM8K,OAAOpM,KAAAA,CAChBqM,cAAe,OACfhJ,KAAMwG,IAAAA,SAGTzC,MAAAA,EC3DjBkF,KAAM,GACNjJ,KAAM,GAEN5B,SAAS,EACT8K,aAAc,UAEdC,KAAM,MACNlC,aAAa,IAGJmC,EAAAA,EAAAA,CAAAA,EACNnP,EAAAA,CACHqM,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,eAE5C+C,WAA8B,oBAAXC,QAAAA,OAAAA,EAAyBA,OAAOC,kBAAAA,EAAwB,IEjElEC,EAAgB,SACzB1M,EACA2M,EACAhF,EACAD,EACArI,EACAuN,GAAAA,OAGIC,EAAAA,EAAAA,IACInF,EACA,CAAEoF,IAAK9M,EAAKU,IAAIiM,GAAWI,IAAK,EAAGxG,IAAK,GACxClH,EACAuN,GAENjF,QAAQA,EAAAA,EAMDqF,EAAgB,SAAWhN,EAAkBmH,GAAAA,OACtDnH,EAAKU,KACD,YAAAuM,OAAAA,EAAAA,CAAAA,EAEW9F,EAAK9G,QAAgC,SAACC,EAAK4M,GAAAA,OAC1C5M,EAAI4M,GAAO,KACJ5M,CAAAA,GACR,CAAC,GACD2M,EAAAA,GAAAA,EAINE,EAAmB,SAA2CnN,GAAAA,OACvEoN,OAAOjG,KAAKnH,GAAMK,QAAgC,SAACC,EAAK4M,GAAAA,OAChDlN,EAAKkN,KACL5M,EAAI4M,GAAOlN,EAAKkN,IAEb5M,CAAAA,GACR,CAAC,EAAD,EAEM+M,EAAc,SAAIrE,GAAAA,MAAa,CAACA,EAAOsE,OAAOtE,GAAAA,EAAAA,GAAAA,CAAAA,SAAAA,WAAAA,WAAAA,UAAAA,QAAAA,SAAAA,UAAAA,eAAAA,aAAAA,aAAAA,aC3BrDuE,GAAK,SAACvE,EAAewE,GAAAA,OAAkBxE,EAAQwE,CAAAA,EAC/CC,GAAK,SAACzE,EAAewE,GAAAA,OAAkBxE,EAAQwE,CAAAA,EAE/CE,GAAQ,SAACC,EAAeC,GAAAA,OAC1BC,MAAMxF,KAAK,IAAIyF,OAAOF,EAAMD,IAAQ,SAACI,EAAGpJ,GAAAA,OAAUgJ,EAAQhJ,CAAAA,GAAAA,EAExDqJ,GAAc,SAAChF,GAAAA,OAAmBuE,GAAGvE,EAAO,GAAK,EAAIA,CAAAA,EAMrDiF,GAA8B,SAAA9H,EAahC+H,EACA5G,EACA6G,GAAAA,IAbInO,EAAAA,EAAAA,KACAoO,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA1B,EAAAA,EAAAA,SACA2B,EAAAA,EAAAA,gBAAAA,EAAAA,EACA1G,aAAAA,OAAAA,IAAAA,EAAe,IACfT,EAAAA,EAAAA,KACAoH,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAMEC,EAAUpH,EAAUmG,GAAKF,GAGzBoB,EAAc3O,EAAKU,IAAIyM,GAEvB/G,EAAqC,UAC3Ce,EAAKzC,SAAQ,SAACwI,EAAK1G,GAAAA,OACfkH,GAAM,EAAGa,EAAOK,SAAS7J,QAAQL,SAAQ,YAAAC,IAAAA,EAN/BxB,EAAAA,EAAAA,EAOoBkK,EAAYrN,EAAK2E,GAAOuI,IAA3C2B,EAAAA,EAAAA,GAAU7F,EAAAA,EAAAA,GACXI,EAAauD,EAAS3M,EAAK2E,IAC3B9G,GAAAA,OAAAA,EAAK0Q,EAAOnF,IAAAA,EAAe,GAAK8E,EAAW1H,EAAIoB,EAAepB,EAC9D1I,EAVe4Q,EAAfvL,EAUS6F,EAViB,GAAK,OAAL,EAAKwF,EAAOrL,IAAAA,EAAM,EAAIgL,EAWhDW,EAVI,SAAC3L,EAAWrF,GAAAA,IAAAA,EAAAA,OAAe4Q,EAAQvL,EAAG,GAAKgL,EAAOrQ,GAAAA,OAAAA,EAAK0Q,EAAOrL,IAAAA,EAAM,GAAKgL,CAAAA,CAAzE,CAUkBnF,EAAOlL,GAC7BiR,EAAmC,CACrChG,GAAImE,EACJlE,MAAoB,OAAb6F,EAAoBA,EAAW7F,EACtCC,eAAgBmF,EAAYpF,GAC5BgG,QAAQ,EACRrK,MAAAA,EACAyE,WAAAA,EACApJ,KAAM2O,EAAYhK,IAGtByB,EAAK6I,KAAK,CACN/B,IAAQA,EAAAA,IAAO6B,EAAQ3F,WACvBzE,MAAOyB,EAAKrB,OACZ/E,KAAM+O,EACNlR,EAAAA,EACAC,EAAAA,EACAqN,KAAMsD,EAAOS,KAAOrR,EACpBuN,KAAMqD,EAAOU,IAAMrR,EACnB2B,MAAOyO,EACP1O,OAAQsP,EACRjG,MAAOwF,EAASU,GAChB9H,MAAOqH,EAAgBS,IAAAA,GAAAA,IAK5B3I,CAAAA,EAMLgJ,GAAgC,SAAAjJ,EAalC2I,EACAxH,EACA+H,GAAAA,IAbIrP,EAAAA,EAAAA,KACAoO,EAAAA,EAAAA,YACAzB,EAAAA,EAAAA,SACA0B,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,gBACAnH,EAAAA,EAAAA,KAAAA,EAAAA,EACAS,aAAAA,OAAAA,IAAAA,EAAe,IACf2G,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAMEC,EAAUpH,EAAUmG,GAAKF,GAGzBoB,EAAc3O,EAAKU,IAAIyM,GAEvB/G,EAAqC,UAC3Ce,EAAKzC,SAAQ,SAACwI,EAAK1G,GAAAA,OACfkH,GAAM,EAAGc,EAAOI,SAAS7J,QAAQL,SAAQ,YAAAC,IAAAA,EAN/BxB,EAAAA,EAAAA,EAOoBkK,EAAYrN,EAAK2E,GAAOuI,IAA3C2B,EAAAA,EAAAA,GAAU7F,EAAAA,EAAAA,GACXI,EAAauD,EAAS3M,EAAK2E,IAC3B9G,EATe6Q,EAAfvL,EASS6F,EATiB,GAAKqG,EAAAA,OAAAA,EAAOd,EAAOpL,IAAAA,EAAM,EAUnDrF,GAAAA,OAAAA,EAAK0Q,EAAOpF,IAAAA,EAAe,GAAK0F,EAAYtI,EAAIoB,EAAepB,EAC/D0H,EAVG,SAAC/K,EAAWtF,GAAAA,IAAAA,EAAAA,OAAe6Q,EAAQvL,EAAG,IAAM,OAAN,EAAMoL,EAAOpL,IAAAA,EAAM,GAAKkM,EAAOA,EAAOxR,CAAAA,CAA5E,CAUiBmL,EAAOnL,GAC3BkR,EAAmC,CACrChG,GAAImE,EACJlE,MAAoB,OAAb6F,EAAoBA,EAAW7F,EACtCC,eAAgBmF,EAAYpF,GAC5BgG,QAAQ,EACRrK,MAAAA,EACAyE,WAAAA,EACApJ,KAAM2O,EAAYhK,IAGtByB,EAAK6I,KAAK,CACN/B,IAAQA,EAAAA,IAAO6B,EAAQ3F,WACvBzE,MAAOyB,EAAKrB,OACZ/E,KAAM+O,EACNlR,EAAAA,EACAC,EAAAA,EACAqN,KAAMsD,EAAOS,KAAOrR,EACpBuN,KAAMqD,EAAOU,IAAMrR,EACnB2B,MAAOyO,EACP1O,OAAQsP,EACRjG,MAAOwF,EAASU,GAChB9H,MAAOqH,EAAgBS,IAAAA,GAAAA,IAK5B3I,CAAAA,EAMEkJ,GAAsB,SAAAnJ,GAAA,MAjIV6C,EAkIrB3B,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SACAF,EAAAA,EAAAA,QACA7H,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAAAA,EAAAA,EACAmI,QAAAA,OAAAA,IAAAA,EAAU,IAAA4H,EAAAA,EACV3H,aAAAA,OAAAA,IAAAA,EAAe,IACfH,EAAAA,EAAAA,WACY+H,EAAAA,EAAZ9H,WAAAA,EAAAA,EACA+H,UAAAA,OAAAA,IAAAA,EAAY,KACTC,EAAAA,EAAAA,EAAAA,IAuBGvI,EAAOuI,EAAMvI,KAAKwI,QAAO,YAAAzC,OAAQuC,EAAUG,SAAS1C,EAAAA,IACpDlN,EAAOgN,EAAc0C,EAAM1P,KAAMmH,GAAAA,EAExB,aAAXE,EAAyB,CAAC,IAAK,IAAK5H,GAAoB,CAAC,IAAK,IAAKD,GADhEoN,EAAAA,EAAAA,GAAMiD,EAAAA,EAAAA,GAAWxQ,EAAAA,EAAAA,GAElBqI,EAAagF,EACf1M,EACA0P,EAAM/C,SACNhF,EACA6H,EACAnQ,EACAwQ,GAGEC,EAAAA,EAAAA,CACFvJ,IAAKiB,EACLuF,IAAKxF,EACLD,QAAAA,GACGG,GAGDsI,EAA6B,SAAlBD,EAAU/C,IAAiBiB,GAAc,SAAChF,GAAAA,OAAkBA,CAAAA,EAEvEgH,EAAShQ,EACVK,QAAiB,SAACC,EAAK2P,GAAAA,MAAAA,GAAAA,OAAc3P,EAAQ6G,EAAKzG,KAAI,YAAAwP,OAAKD,EAAMC,EAAAA,IAAAA,GAAgB,IACjFP,OAAOQ,SACNpD,EAAMgD,EAASlR,KAAKkO,IAAAA,MAALlO,KAAYmR,IAC3BzJ,GA9LeyC,EA8LOnK,KAAK0H,IAAAA,MAAL1H,KAAYmR,GA9LAI,SAASpH,GAASA,EAAQ,GAgM5DqH,GAAQxD,EAAAA,EAAAA,IACViD,EACA,CAAEhD,IAAKkD,EAAQjD,IAAAA,EAAKxG,IAAAA,GACX,MAATqG,EAAenN,EAAQD,EACvBoN,GAAAA,EAGgC,aAAXvF,EAAwB,CAACK,EAAY2I,GAAS,CAACA,EAAO3I,GAAxE6G,EAAAA,EAAAA,GAAQC,EAAAA,EAAAA,GAET8B,GAAa5I,EAAW4I,YAAc1I,GAAgBT,EAAKpC,OAAS,IAAMoC,EAAKpC,OAC/EwL,EAAS,CAAC,KACPb,EAAAA,CAAO1P,KAAAA,EAAMmH,KAAAA,EAAMS,aAAAA,EAAc2G,OAAAA,EAAQC,OAAAA,IAC9C8B,EACAR,EAAUxI,QAAAA,OAAAA,EACV+I,EAAM,MAAM,SAUT,CAAE9B,OAAAA,EAAQC,OAAAA,EAAQpI,KANrBkK,EAAY,EACK,aAAXjJ,EACI4G,GAAAA,WAAAA,EAA+BsC,GAC/BnB,GAAAA,WAAAA,EAAiCmB,GACrC,KAAAC,GAAAA,CAAAA,OAAAA,SAAAA,WAAAA,WAAAA,UAAAA,QAAAA,SAAAA,UAAAA,aAAAA,aAAAA,aC3NRC,GAAc,SAAdA,EAAkBC,GAAAA,IAAAA,EAAAA,OACpBA,EAAIC,KAAK9C,MAAM+C,SAAWH,GAAAA,EAAa,IAAWI,OAAAA,MAAAA,EAAUH,IAASA,CAAAA,EAQnEI,GAA8B,SAAA3K,EAYhC+H,EACA5G,GAAAA,IAXI8G,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA1B,EAAAA,EAAAA,SACA2B,EAAAA,EAAAA,gBACA1G,EAAAA,EAAAA,aACAmJ,EAAAA,EAAAA,YACAxC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAQErI,EAAqC,UAC3C2K,EAAYrM,SAAQ,YAAAsM,OAChBzC,EAAOK,SAASlK,SAAQ,SAACC,EAAO6B,GAAAA,IAAAA,EAAAA,EACtBrD,EAAI6N,EAAgBxK,GACpB3I,EAAAA,OAAAA,EAAI0Q,EAAO5B,EAASxJ,EAAEnD,QAAAA,EAAU,EAChClC,GAAAA,OAAAA,EARD,SAACqF,GAAAA,OAA4BqL,EAAOrL,EAAEmE,EAAU,EAAI,IAApD,CAQWnE,IAAAA,EAAM,GAAoB,GAAfyE,EACrBkH,EARI,SAAC3L,EAAyBrF,GAAAA,IAAAA,EAAAA,OAAAA,OAAAA,EAAe0Q,EAAOrL,EAAEmE,EAAU,EAAI,OAAO,GAAKxJ,CAAAA,CAA5E,CAQkBqF,EAAGrF,GAAK8J,EAAAA,EACVyF,EAAYlK,EAAEnD,KAAKgR,EAAgB9D,MAAtD2B,EAAAA,EAAAA,GAAU7F,EAAAA,EAAAA,GAEX+F,EAAmC,CACrChG,GAAIiI,EAAgB9D,IACpBlE,MAAoB,OAAb6F,EAAoBA,EAAW7F,EACtCC,eAAgBmF,EAAYpF,GAC5BgG,QAAQ,EACRrK,MAAO6B,EACP4C,WAAYzE,EACZ3E,KAAMmN,EAAiBhK,EAAEnD,OAG7BoG,EAAK6I,KAAK,CACN/B,IAAQ8D,EAAgB9D,IAAAA,IAAOvI,EAC/BA,MAAOyB,EAAKrB,OACZ/E,KAAM+O,EACNlR,EAAAA,EACAC,EAAAA,EACAqN,KAAMsD,EAAOS,KAAOrR,EACpBuN,KAAMqD,EAAOU,IAAMrR,EACnB2B,MAAOyO,EACP1O,OAAQsP,EACRjG,MAAOwF,EAASU,GAChB9H,MAAOqH,EAAgBS,IAAAA,GAAAA,IAK5B3I,CAAAA,EAML6K,GAAgC,SAAA9K,EAYlC2I,EACAxH,GAAAA,IAXI8G,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA1B,EAAAA,EAAAA,SACA2B,EAAAA,EAAAA,gBACA1G,EAAAA,EAAAA,aACAmJ,EAAAA,EAAAA,YACAxC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAQErI,EAAqC,UAC3C2K,EAAYrM,SAAQ,YAAAsM,OAChBxC,EAAOI,SAASlK,SAAQ,SAACC,EAAO6B,GAAAA,IAAAA,EAAAA,EACtBrD,EAAI6N,EAAgBxK,GACpB1I,EAAAA,OAAAA,EAAI0Q,EAAO7B,EAASxJ,EAAEnD,QAAAA,EAAU,EAChCnC,GAAAA,OAAAA,EARD,SAACsF,GAAAA,OAA4BoL,EAAOpL,EAAEmE,EAAU,EAAI,IAApD,CAQWnE,IAAAA,EAAM,GAAoB,GAAfyE,EACrBsG,EARG,SAAC/K,EAAyBtF,GAAAA,IAAAA,EAAAA,OAAAA,OAAAA,EAAe0Q,EAAOpL,EAAEmE,EAAU,EAAI,OAAO,GAAKzJ,CAAAA,CAA5E,CAQiBsF,EAAGtF,GAAK+J,EAAAA,EACRyF,EAAYlK,EAAEnD,KAAKgR,EAAgB9D,MAAtD2B,EAAAA,EAAAA,GAAU7F,EAAAA,EAAAA,GAEX+F,EAAmC,CACrChG,GAAIiI,EAAgB9D,IACpBlE,MAAoB,OAAb6F,EAAoBA,EAAW7F,EACtCC,eAAgBmF,EAAYpF,GAC5BgG,QAAQ,EACRrK,MAAO6B,EACP4C,WAAYzE,EACZ3E,KAAMmN,EAAiBhK,EAAEnD,OAG7BoG,EAAK6I,KAAK,CACN/B,IAAQ8D,EAAgB9D,IAAAA,IAAOvI,EAC/BA,MAAOyB,EAAKrB,OACZ/E,KAAM+O,EACNlR,EAAAA,EACAC,EAAAA,EACAqN,KAAMsD,EAAOS,KAAOrR,EACpBuN,KAAMqD,EAAOU,IAAMrR,EACnB2B,MAAOyO,EACP1O,OAAQsP,EACRjG,MAAOwF,EAASU,GAChB9H,MAAOqH,EAAgBS,IAAAA,GAAAA,IAK5B3I,CAAAA,EAME8K,GAAsB,SAAA/K,GAAA,IA5HTgL,EA6HtBnR,EAAAA,EAAAA,KACAqH,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SACAF,EAAAA,EAAAA,QACA7H,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAAAA,EAAAA,EACAmI,QAAAA,OAAAA,IAAAA,EAAU,IACVF,EAAAA,EAAAA,WACY+H,EAAAA,EAAZ9H,WAAAA,EAAAA,EACA+H,UAAAA,OAAAA,IAAAA,EAAY,KACTC,EAAAA,EAAAA,EAAAA,IAuBGvI,EAAOuI,EAAMvI,KAAKwI,QAAO,YAAAzC,OAAQuC,EAAUG,SAAS1C,EAAAA,IACpD6D,GAAcK,EAAAA,EAAAA,KAA0BjK,KAAKA,GAAM5G,OAAO8Q,EAAAA,EAA5CD,CAChBpE,EAAchN,EAAMmH,IAAAA,EAIT,aAAXE,EAAyB,CAAC,IAAK,IAAK5H,GAAoB,CAAC,IAAK,IAAKD,GADhEoN,EAAAA,EAAAA,GAAMiD,EAAAA,EAAAA,GAAWxQ,EAAAA,EAAAA,GAElBqI,EAAagF,EACf1M,EACA0P,EAAM/C,SACNhF,EACA6H,EACAnQ,EACAwQ,GAGEC,EAAAA,EAAAA,CACFvJ,IAAKiB,EACLuF,IAAKxF,EACLD,QAAAA,GACGG,GAGDuI,GAtLgBmB,EAuLlBV,GAAYM,GAtLP,QAuLLtJ,EAAWnK,KAvLE6T,EAAMxB,QAAO,YAAA2B,OAAe,IAARA,CAAAA,IAAaH,GAyL5CpE,EAAMlO,KAAKkO,IAAAA,MAALlO,KAAYmR,GAClBzJ,EAAM1H,KAAK0H,IAAAA,MAAL1H,KAAYmR,GAElBK,GAAQxD,EAAAA,EAAAA,IACViD,EACA,CAAEhD,IAAKkD,EAAQjD,IAAAA,EAAKxG,IAAAA,GACX,MAATqG,EAAenN,EAAQD,EACvBoN,GAAAA,EAGgC,aAAXvF,EAAwB,CAACK,EAAY2I,GAAS,CAACA,EAAO3I,GAAxE6G,EAAAA,EAAAA,GAAQC,EAAAA,EAAAA,GAET5G,EAAe8H,EAAM9H,aAAe,EAAI8H,EAAM9H,aAAe,EAC7D0I,EAAY5I,EAAW4I,YACvBC,EAAS,CAAC,KACPb,EAAAA,CAAO9H,aAAAA,EAAcmJ,YAAAA,EAAaxC,OAAAA,EAAQC,OAAAA,IAC/C8B,EACAR,EAAUxI,SAAAA,MAUP,CAAEiH,OAAAA,EAAQC,OAAAA,EAAQpI,KANrBkK,EAAY,EACK,aAAXjJ,EACIyJ,GAAAA,WAAAA,EAA+BP,GAC/BU,GAAAA,WAAAA,EAAiCV,GACrC,KC3KDgB,GAAgB,SAAApL,GAAA,IACzBC,EAAAA,EAAAA,KACAoL,EAAAA,EAAAA,UACAnJ,EAAAA,EAAAA,KACAjB,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACAoK,EAAAA,EAAAA,YACAnK,EAAAA,EAAAA,QAOMoK,GAAiBC,EAAAA,EAAAA,IAACA,MACpBF,EAAAA,EAAyB,YAATpJ,EAAqB,aAAe,YAG3C,YAATA,EAxC+B,SACnCjC,EACAiB,EACAqK,GAAAA,IAEM1R,EAAO4R,IACTxL,EAAK1F,KAAI,YAAA4F,IAAAA,EAAAA,EAAAA,MAAQ,CACbyC,GAAI,OAAJA,EAAIzC,EAAItG,KAAKoJ,YAAAA,EAAc,GAC3BnC,MAAOyK,EAAepL,EAAItG,MAC1BgP,OAAQ1I,EAAItG,KAAKgP,OACjBnG,MAAO,OAAPA,EAAOvC,EAAIuC,OAAAA,EAAS,YAExB,qBAAGE,EAAAA,IAAAA,MAGQ,eAAX1B,GACArH,EAAKsH,UAGFtH,CAAAA,CAnB4B,CAyCAoG,EAAMiB,EAAQqK,GAxEjB,SAChCtL,EACAiB,EACAmK,EACApK,EACAE,EACAoK,GAAAA,IAEM1R,EAAO4R,IACTxL,EAAK1F,KAAI,YAAA4F,IAAAA,EAAAA,MAAQ,CACbyC,GAAIzC,EAAItG,KAAK+I,GACb9B,MAAOyK,EAAepL,EAAItG,MAC1BgP,OAAQ1I,EAAItG,KAAKgP,OACjBnG,MAAO,OAAPA,EAAOvC,EAAIuC,OAAAA,EAAS,YAExB,qBAAGE,EAAAA,IAAAA,OAIS,aAAX1B,GACiB,YAAdD,GACc,WAAdoK,IAAAA,IACAlK,GACQ,eAAXD,GAAyC,YAAdD,IAAAA,IAA2BE,IAEvDtH,EAAKsH,UAGFtH,CAAAA,CA5ByB,CA2EJoG,EAAMiB,EAAQmK,EAAWpK,EAAWE,EAASoK,EAAAA,ECxEhEG,GAAS,oBAClB3K,QAAAA,OAAAA,IAAAA,EAAU/J,EAAa+J,QAAAA,EAAAA,EAAAA,EACvBC,KAAAA,OAAAA,IAAAA,EAAOhK,EAAagK,KAAAA,EAAAA,EAAAA,EACpBF,MAAAA,OAAAA,IAAAA,EAAQ9J,EAAa8J,MAAAA,EAAAA,EAAAA,EACrBkC,aAAAA,OAAAA,IAAAA,EAAehM,EAAagM,aAAAA,EAC5B2I,EAAAA,EAAAA,YAAAA,EAAAA,EACAvJ,OAAAA,OAAAA,IAAAA,EAASpL,EAAaoL,OAAAA,EAAAA,EAAAA,EACtBD,QAAAA,OAAAA,IAAAA,EAAUnL,EAAamL,QAAAA,EAAAA,EAAAA,EACvBI,YAAAA,OAAAA,IAAAA,EAAcvL,EAAauL,YAAAA,EAAAA,EAAAA,EAC3BN,eAAAA,OAAAA,IAAAA,EAAiBjL,EAAaiL,eAAAA,EAAAA,EAAAA,EAC9BhB,UAAAA,OAAAA,IAAAA,EAAYjK,EAAaiK,UAAAA,EAAAA,EAAAA,EACzBC,OAAAA,OAAAA,IAAAA,EAASlK,EAAakK,OAAAA,EAAAA,EAAAA,EACtBC,QAAAA,OAAAA,IAAAA,EAAUnK,EAAamK,QAAAA,EACvBtH,EAAAA,EAAAA,KAAAA,EAAAA,EACAuH,SAAAA,OAAAA,IAAAA,EAAWpK,EAAaoK,SAAAA,EAAAA,EAAAA,EACxBC,SAAAA,OAAAA,IAAAA,EAAWrK,EAAaqK,SAAAA,EACxBiH,EAAAA,EAAAA,OACAhP,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAAAA,EAAAA,EACAmI,QAAAA,OAAAA,IAAAA,EAAUxK,EAAawK,QAAAA,EAAAA,EAAAA,EACvBC,aAAAA,OAAAA,IAAAA,EAAezK,EAAayK,aAAAA,EAAAA,EAAAA,EAC5BH,WAAAA,OAAAA,IAAAA,EAAatK,EAAasK,WAAAA,EAAAA,EAAAA,EAC1BC,WAAAA,OAAAA,IAAAA,EAAavK,EAAauK,WAAAA,EAAAA,EAAAA,EAC1B2B,iBAAAA,OAAAA,IAAAA,EAAmBlM,EAAakM,iBAAAA,EAAAA,EAAAA,EAChCpB,YAAAA,OAAAA,IAAAA,EAAc9K,EAAa8K,YAAAA,EAAAA,EAAAA,EAC3BC,eAAAA,OAAAA,IAAAA,EAAiB/K,EAAa+K,eAAAA,EAAAA,EAAAA,EAC9BC,gBAAAA,OAAAA,IAAAA,EAAkBhL,EAAagL,gBAAAA,EAAAA,EAAAA,EAC/BzB,QAAAA,QAAAA,IAAAA,EAAUvJ,EAAauJ,QAAAA,EACvB+K,GAAAA,EAAAA,YAAAA,IA+BkCM,EAAAA,EAAAA,UAAAA,MAAS1I,EAAAA,EAAoB,IAAxDoG,GAAAA,GAAAA,GAAWuC,GAAAA,GAAAA,GACZrL,IAAckE,EAAAA,EAAAA,cAAY,YAC5BmH,IAAa,YAAAC,OACTA,EAAMC,QAAQnJ,IAAO,EAAIkJ,EAAMtC,QAAO,YAAA1C,OAAQA,IAASlE,CAAAA,IAAAA,GAAAA,OAAUkJ,EAAAA,CAAOlJ,GAAAA,GAAAA,GAE7E,IAEG4D,IAAWwF,EAAAA,EAAAA,IAAoBjL,GAC/BkL,IAAWD,EAAAA,EAAAA,IAAoBlL,GAC/BqH,IAAkB6D,EAAAA,EAAAA,IAAoBhJ,GACtCiF,IAAciE,EAAAA,EAAAA,IAAkBP,GAEhC3Q,IAAQC,EAAAA,EAAAA,MACRiN,IAAWiE,EAAAA,EAAAA,GAAqB/J,EAAQD,GACxCiK,IAAiBC,EAAAA,EAAAA,IACnB9J,EACAvH,IAEEsR,IAAgBD,EAAAA,EAAAA,IAClBpK,EACAjH,IAAAA,IAG+B,YAAdiG,EAA0BkI,GAAsB4B,IACvB,CAC1C7J,OAAAA,EACAC,QAAAA,EACAtH,KAAAA,EACA2M,SAAAA,GACAxF,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA/H,MAAAA,EACAD,OAAAA,EACA6O,SAAAA,GACA1G,QAAAA,EACAC,aAAAA,EACAH,WAAAA,EACAC,WAAAA,EACA+H,UAAAA,GACArB,YAAAA,GACAE,gBAAAA,GACAG,OAAAA,IAlBIrI,GAAAA,GAAAA,KAAMmI,GAAAA,GAAAA,OAAQC,GAAAA,GAAAA,OAqBhBkE,IAAgBtS,EAAAA,EAAAA,UAClB,kBACIgG,GACKuJ,QACG,SAACrJ,GAAAA,OAAuE,OAAnBA,EAAItG,KAAKgJ,KAAAA,IAEjEtI,KAAI,SAAC4F,EAAK3B,GAAAA,OAAAA,EAAAA,CAAAA,EACJ2B,EAAAA,CACH3B,MAAAA,GAAAA,GAAAA,GAEZ,CAACyB,KAGCuM,IAAuB9H,EAAAA,EAAAA,cACzB,gBAAGpL,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAAA,QACDyI,KACDC,EAAiB,GAAKzI,EAAQyI,MAC9BC,EAAkB,GAAK3I,EAAS2I,EAAAA,GAGxC,CAACF,EAAaC,EAAgBC,IAG5ByK,IAAaxS,EAAAA,EAAAA,UACf,kBACI+G,EAAKzG,KAAI,YAAAwM,IACC5G,EAAMF,GAAKyM,MAAK,YAAAvM,OAAOA,EAAItG,KAAK+I,KAAOmE,CAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAEjC5G,EAAAA,CAAKtG,KAAMA,EAAAA,CAAE+I,GAAImE,GAAAA,MAAQ5G,OAAAA,EAAAA,EAAKtG,KAAM,CAAAgP,OAAQS,GAAUG,SAAS1C,MAAAA,GAAAA,GAEnF,CAACuC,GAAWtI,EAAMf,KAGhB0M,IAAoD1S,EAAAA,EAAAA,UACtD,kBACIsG,GAAQhG,KAAI,YAAAkG,MAWD,CAACA,EAVK2K,GAAc,CACvBnL,KAA0B,SAApBQ,EAAOI,SAAsB4L,GAAaxM,GAChDoL,UAAW5K,EAAO4K,UAClBnJ,KAAMzB,EAAOI,SACbI,UAAAA,EACAC,OAAAA,EACAoK,YAAAA,GACAnK,QAAAA,IAAAA,GAAAA,GAKZ,CAACZ,GAASkM,GAAYxM,GAAMgB,EAAWC,EAAQoK,GAAanK,IAAAA,MAGzD,CACHlB,KAAAA,GACAsM,cAAAA,GACAnE,OAAAA,GACAC,OAAAA,GACA7B,SAAAA,GACAyF,SAAAA,GACA9D,gBAAAA,GACAF,YAAAA,GACAC,SAAAA,GACAkE,eAAAA,GACAE,cAAAA,GACAE,qBAAAA,GACAlD,UAAAA,GACA9I,YAAAA,GACAmM,gBAAAA,GAAAA,EAAAA,GAAAA,CAAAA,gBAAAA,UAAAA,eAAAA,QAAAA,iBC1JFC,GAAW,gBACb/S,EAAAA,EAAAA,KACAkH,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,KAEQ6L,EAAAA,EAARvE,OACAhP,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAEA4H,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SAEAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WAEAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aAEAqL,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACArL,WAAAA,OAAAA,IAAAA,EAAa0B,EAAgB1B,WAAAA,EAAAA,EAAAA,EAC7BC,SAAAA,OAAAA,IAAAA,EAAWyB,EAAgBzB,SAAAA,EAAAA,EAAAA,EAC3BC,YAAAA,OAAAA,IAAAA,EAAcwB,EAAgBxB,YAAAA,EAAAA,EAAAA,EAC9BC,YAAAA,OAAAA,IAAAA,EAAcuB,EAAgBvB,YAAAA,EAC9BmL,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YAAAA,EAAAA,EAEA5J,OAAAA,OAAAA,IAAAA,EAASD,EAAgBC,OAAAA,EAAAA,EAAAA,EACzBC,aAAAA,OAAAA,IAAAA,EAAeF,EAAgBE,aAAAA,EAAAA,EAAAA,EAE/BxB,YAAAA,OAAAA,IAAAA,EAAcsB,EAAgBtB,YAAAA,EAC9BhB,EAAAA,EAAAA,MAAAA,EAAAA,EACAiB,eAAAA,OAAAA,IAAAA,EAAiBqB,EAAgBrB,eAAAA,EAAAA,EAAAA,EACjCC,gBAAAA,OAAAA,IAAAA,EAAkBoB,EAAgBpB,gBAAAA,EAClCC,EAAAA,EAAAA,eAAAA,EAAAA,EAEAkB,QAAAA,OAAAA,IAAAA,EAAUC,EAAgBD,QAAAA,EAE1BhB,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,OAAAA,EAAAA,EACA4D,KAAAA,QAAAA,IAAAA,EAAO5C,EAAgB4C,KAAAA,EAAAA,GAAAA,EACvBjJ,KAAAA,QAAAA,IAAAA,GAAOqG,EAAgBrG,KAAAA,GAAAA,GAAAA,EACvBa,aAAAA,QAAAA,IAAAA,GAAewF,EAAgBxF,aAAAA,GAAAA,GAAAA,EAC/B0E,YAAAA,QAAAA,IAAAA,GAAcc,EAAgBd,YAAAA,GAC9BC,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzI,YAAAA,QAAAA,IAAAA,GAAcsJ,EAAgBtJ,YAAAA,GAE9BwR,GAAAA,EAAAA,YACAtI,GAAAA,EAAAA,aAEA2I,GAAAA,EAAAA,YAAAA,GAAAA,EAEAnJ,cAAAA,QAAAA,IAAAA,GAAgBY,EAAgBZ,cAAAA,GAAAA,GAAAA,EAChCC,QAAAA,QAAAA,IAAAA,GAAUW,EAAgBX,QAAAA,GAC1BoB,GAAAA,EAAAA,QACAC,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,aAEAxD,GAAAA,EAAAA,QAAAA,GAAAA,EAEA2F,KAAAA,QAAAA,IAAAA,GAAO9C,EAAgB8C,KAAAA,GACvBjC,GAAAA,EAAAA,UACAC,GAAAA,EAAAA,eACAC,GAAAA,EAAAA,gBAAAA,GAAAA,EACAH,YAAAA,QAAAA,IAAAA,GAAcZ,EAAgBY,YAAAA,GAC9BkJ,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,kBACAC,GAAAA,EAAAA,mBAEAlK,GAAAA,EAAAA,iBAAAA,IAE0ChI,EAAAA,EAAAA,MAAlCC,GAAAA,GAAAA,QAAiBC,GAAAA,GAARC,OAAAA,IACoDgS,EAAAA,EAAAA,IACjE/T,EACAD,EACAwT,GAHIS,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAajF,GAAAA,GAAAA,OAAQkF,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAAA,GAkBjD/B,GAAiB,CACjB3K,QAAAA,EACAD,MAAAA,EACAkC,aAAAA,GACA2I,YAAAA,GACAvJ,OAAAA,EACAD,QAAAA,EACAI,YAAAA,GACAN,eAAAA,EACAhB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAtH,KAAAA,EACAmH,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAiH,OAAAA,GACAhP,MAAOkU,GACPnU,OAAQoU,GACRjM,QAAAA,EACAC,aAAAA,EACAH,WAAAA,EACAC,WAAAA,EACAO,YAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAzB,QAAAA,GACA+K,YAAAA,GACApI,iBAAAA,KAvCAjD,GAAAA,GAAAA,KACAsM,GAAAA,GAAAA,cACAnE,GAAAA,GAAAA,OACAC,GAAAA,GAAAA,OACA4D,GAAAA,GAAAA,SACA9D,GAAAA,GAAAA,gBACAiE,GAAAA,GAAAA,eACAE,GAAAA,GAAAA,cACAE,GAAAA,GAAAA,qBACAhM,GAAAA,GAAAA,YACAmM,GAAAA,GAAAA,gBAgCEe,IAAaC,EAAAA,EAAAA,eAcjBpB,GAAe,CACbvL,KAAM,YAAAb,OAAOA,EAAI4G,GAAAA,EACjB7E,KAAM,YAAA/B,OAAAA,EAAAA,CACFoC,YAAa6J,GAAejM,GAC5BuC,MAAOvC,EAAIuC,MACXrJ,OAAQ,EACRkK,WAAY+I,GAAcnM,GAC1BqD,aAAc,EACdC,OAAQtD,EAAI7G,MAAQ,EACpBoK,OAAQvD,EAAI9G,OAAS,EACrBsK,UAAW,aAAaxD,EAAIzI,EAAAA,MAAMyI,EAAIxI,EAAIwI,EAAI9G,QAAAA,IAC9CC,MAAO6G,EAAI7G,OACI,aAAX4H,EACE,CAAC,EACD,CACI7H,OAAQ8G,EAAI9G,OACZsK,UAAW,aAAaxD,EAAIzI,EAAAA,KAAMyI,EAAIxI,EAAAA,IACtC2B,MAAO,KAGrBsU,MAAO,YAAAzN,MAAQ,CACXoC,YAAa6J,GAAejM,GAC5BuC,MAAOvC,EAAIuC,MACXrJ,OAAQ8G,EAAI9G,OACZkK,WAAY+I,GAAcnM,GAC1BqD,aAAc,EACdC,OAAQtD,EAAI7G,MAAQ,EACpBoK,OAAQvD,EAAI9G,OAAS,EACrBsK,UAAW,aAAaxD,EAAIzI,EAAAA,KAAMyI,EAAIxI,EAAAA,IACtC2B,MAAO6G,EAAI7G,MAAAA,EAEfuU,OAAQ,YAAA1N,MAAQ,CACZoC,YAAa6J,GAAejM,GAC5BuC,MAAOvC,EAAIuC,MACXrJ,OAAQ8G,EAAI9G,OACZkK,WAAY+I,GAAcnM,GAC1BqD,aAAc,EACdC,OAAQtD,EAAI7G,MAAQ,EACpBoK,OAAQvD,EAAI9G,OAAS,EACrBsK,UAAW,aAAaxD,EAAIzI,EAAAA,KAAMyI,EAAIxI,EAAAA,IACtC2B,MAAO6G,EAAI7G,MAAAA,EAEfwU,MAAO,YAAA3N,OAAAA,EAAAA,CACHoC,YAAa6J,GAAejM,GAC5BuC,MAAOvC,EAAIuC,MACXrJ,OAAQ,EACRkK,WAAY+I,GAAcnM,GAC1BqD,aAAc,EACdC,OAAQtD,EAAI7G,MAAQ,EACpBoK,OAAQ,EACRC,UAAW,aAAaxD,EAAIzI,EAAAA,MAAMyI,EAAIxI,EAAIwI,EAAI9G,QAAAA,IAC9CC,MAAO6G,EAAI7G,OACI,aAAX4H,EACE,CAAC,EACD,CACIuC,OAAQ,EACRC,OAAQvD,EAAI9G,OAAS,EACrBA,OAAQ8G,EAAI9G,OACZsK,UAAW,aAAaxD,EAAIzI,EAAAA,KAAMyI,EAAIxI,EAAAA,IACtC2B,MAAO,KAGrB+B,OAAQD,GACRI,WAAYL,KAGV4S,IAAc9T,EAAAA,EAAAA,UAChB,iBAAO,CACH2D,aAAAA,GACA0E,YAAAA,GACAR,YAAAA,EACAU,cAAAA,GACAT,eAAAA,EACAC,gBAAAA,EACA6B,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAoE,gBAAAA,GACA1F,QAAAA,GACAuB,YAAAA,GACAC,UAAWiJ,GACXhJ,eAAgBiJ,GAChBhJ,gBAAiBiJ,GAAAA,GAErB,CACIxP,GACA0E,GACAR,EACAqG,GACA3F,GACAR,EACAD,EACA8B,GACAC,GACAC,GACAtB,GACAuB,GACAkJ,GACAC,GACAC,KAIFY,IAAYC,EAAAA,EAAAA,IAASjI,GAAM/F,GAAMlD,GAAM,CACzCmR,QAAS,OACTC,UAAW,cAGTC,GAA2C,CAC7CtU,YAAa,KACbuU,KAAM,KACNpO,KAAM,KACNqO,KAAM,KACN/N,QAAS,KACT4C,QAAS,MAGTE,EAAOoG,SAAS,iBAChB2E,GAAUtU,aACN8B,EAAAA,EAAAA,KAACmE,EAAAA,CAAiCE,KAAMA,GAAMnG,YAAaA,IAAvC,gBAIxBuJ,EAAOoG,SAAS,UAChB2E,GAAUC,MACNzS,EAAAA,EAAAA,KAAC2S,EAAAA,GAAAA,CAEGnG,OAAQA,GACRC,OAAQA,GACR/O,MAAOkU,GACPnU,OAAQoU,GACRzE,IAAK8D,EACL0B,MAAOzB,EACP0B,OAAQ/M,EACRqH,KAAMpH,GARF,SAaZ0B,EAAOoG,SAAS,UAChB2E,GAAUnO,MACNrE,EAAAA,EAAAA,KAAC8S,EAAAA,SAAAA,CAAAA,SACIhB,IAAW,SAAC5R,EAAOqE,GAAAA,OAChB1E,EAAAA,EAAAA,eAAc6H,EAAAA,EAAAA,CAAAA,EACPyK,GAAAA,CACH5N,IAAAA,EACArE,MAAAA,EACA8H,kBAAmB4I,GAAqBrM,GACxCW,MAAOmL,GAAS9L,EAAItG,QAAAA,KAPlB,SAclBwJ,EAAOoG,SAAS,UAChB2E,GAAUE,MACN1S,EAAAA,EAAAA,KAAC+S,EAAAA,GAAAA,CAEGrV,MAAOkU,GACPnU,OAAQoU,GACRrF,OAAQxG,EAAcwG,GAAS,KAC/BC,OAAQxG,EAAcwG,GAAS,KAC/BuG,QAAS5B,EACT6B,QAAS5B,GANL,SAWZ5J,EAAOoG,SAAS,aAChB2E,GAAU7N,SACN3E,EAAAA,EAAAA,KAAC0E,EAAAA,CAEGhH,MAAOkU,GACPnU,OAAQoU,GACRlN,QAASoM,GACTnM,YAAaA,IAJT,YASZ6C,EAAOoG,SAAS,aAChB2E,GAAUjL,SACNvH,EAAAA,EAAAA,KAACkT,EAAAA,GAAAA,CAEG3L,QAASA,EACT7J,MAAOkU,GACPnU,OAAQoU,GACRrF,OAAQA,GACRC,OAAQA,IALJ,gBAUV0G,IAA8C9U,EAAAA,EAAAA,UAChD,uBACO8T,GAAAA,CACHzF,OAAAA,GACAhP,MAAAA,EACAD,OAAAA,EACAmU,WAAAA,GACAC,YAAAA,GACAxN,KAAAA,GACAwM,WAAYE,GACZ7K,YAAAA,EACAsG,OAAAA,GACAC,OAAAA,GACA5F,QAAAA,GACA0F,gBAAAA,GACAtE,QAAAA,GACAC,aAAAA,GACAC,aAAAA,IAAAA,GAEJ,CACIgK,GACAzF,GACAhP,EACAD,EACAmU,GACAC,GACAxN,GACA0M,GACA7K,EACAsG,GACAC,GACA5F,GACA0F,GACAtE,GACAC,GACAC,KAAAA,OAKJnI,EAAAA,EAAAA,KAACoT,EAAAA,GAAAA,CACG1V,MAAOgU,GACPjU,OAAQkU,GACRjF,OAAQA,GACRtC,KAAMgI,GACN9H,KAAMA,GACNjC,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBH,YAAaA,GAAAA,SAEZX,EAAO9I,KAAI,SAAC0U,EAAO5O,GAAAA,IAAAA,EAAAA,MACK,mBAAV4O,GACArT,EAAAA,EAAAA,KAAC8S,EAAAA,SAAAA,CAAAA,UAAkBjT,EAAAA,EAAAA,eAAcwT,EAAOF,KAAzB1O,GAAAA,OAAAA,EAAAA,MAGnB+N,QAAAA,EAAAA,GAAYa,IAAAA,EAAU,WAMhCC,GAAM,SAAAlP,GAAA,QACfwC,cAAAA,OAAAA,IAAAA,EAAgBY,EAAgBZ,cAAAA,EAAAA,EAAAA,EAChCrH,QAAAA,OAAAA,IAAAA,EAAUiI,EAAgBjI,QAAAA,EAAAA,EAAAA,EAC1B8K,aAAAA,OAAAA,IAAAA,EAAe7C,EAAgB6C,aAAAA,EAC/BjL,EAAAA,EAAAA,MACAmU,EAAAA,EAAAA,cACGC,EAAAA,EAAAA,EAAAA,IAAAA,OAEHxT,EAAAA,EAAAA,KAACyT,EAAAA,GAAAA,CAEOlU,QAAAA,EACAqH,cAAAA,EACAyD,aAAAA,EACAkJ,cAAAA,EACAnU,MAAAA,EAAAA,UAGJY,EAAAA,EAAAA,KAACgR,GAAAA,EAAAA,CAAmBpK,cAAeA,GAAmB4M,KAAAA,EAAAA,GAAAA,CAAAA,gBAAAA,gBAAAA,SChZxDE,GAAqB,SACvBC,EACAjH,EACA5Q,EACAC,GAAAA,OAEA4X,EAAM7C,MAAK,YAAA8C,OACPC,EAAAA,EAAAA,IAAeD,EAAK9X,EAAI4Q,EAAOS,KAAMyG,EAAK7X,EAAI2Q,EAAOU,IAAKwG,EAAKlW,MAAOkW,EAAKnW,OAAQ3B,EAAGC,EAAAA,GAAAA,EAKxF+X,GAAiB,gBACnB7V,EAAAA,EAAAA,KACAkH,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,KAEQ6L,EAAAA,EAARvE,OACAhP,EAAAA,EAAAA,MACAD,EAAAA,EAAAA,OAEA4H,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SAEAC,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,WAEAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aAEAqL,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACArL,WAAAA,OAAAA,IAAAA,EAAayE,EAAmBzE,WAAAA,EAAAA,EAAAA,EAChCC,SAAAA,OAAAA,IAAAA,EAAWwE,EAAmBxE,SAAAA,EAAAA,EAAAA,EAC9BC,YAAAA,OAAAA,IAAAA,EAAcuE,EAAmBvE,YAAAA,EAAAA,EAAAA,EACjCC,YAAAA,OAAAA,IAAAA,EAAcsE,EAAmBtE,YAAAA,EACjCmL,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YAAAA,EAAAA,EAEA5J,OAAAA,OAAAA,IAAAA,EAAS8C,EAAmB9C,OAAAA,EAAAA,EAAAA,EAC5BsM,UAAAA,OAAAA,IAAAA,EAAY,SACRrR,EAAAA,GAAAA,IAAAA,EAAAA,EAEI6B,IAAOuC,EAAAA,EAAAA,MAAOrJ,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,MAAO5B,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAEhC4K,EAAAA,EAAAA,YACA3E,EAAAA,EAAAA,aACA0E,EAAAA,EAAAA,YACAxB,EAAAA,EAAAA,MACAyC,EAAAA,EAAAA,WACAK,EAAAA,EAAAA,kBAAAA,GAGJtF,EAAIe,UAAYqD,EAEZJ,EAAc,IACdhE,EAAIU,YAAcuD,EAClBjE,EAAIW,UAAYqD,GAGpBhE,EAAIY,YAEAtB,EAAe,EAAG,KACZV,EAASxE,KAAKkO,IAAIhJ,EAAcvE,GAEtCiF,EAAIG,OAAO/G,EAAIwF,EAAQvF,GACvB2G,EAAII,OAAOhH,EAAI4B,EAAQ4D,EAAQvF,GAC/B2G,EAAIsR,iBAAiBlY,EAAI4B,EAAO3B,EAAGD,EAAI4B,EAAO3B,EAAIuF,GAClDoB,EAAII,OAAOhH,EAAI4B,EAAO3B,EAAI0B,EAAS6D,GACnCoB,EAAIsR,iBAAiBlY,EAAI4B,EAAO3B,EAAI0B,EAAQ3B,EAAI4B,EAAQ4D,EAAQvF,EAAI0B,GACpEiF,EAAII,OAAOhH,EAAIwF,EAAQvF,EAAI0B,GAC3BiF,EAAIsR,iBAAiBlY,EAAGC,EAAI0B,EAAQ3B,EAAGC,EAAI0B,EAAS6D,GACpDoB,EAAII,OAAOhH,EAAGC,EAAIuF,GAClBoB,EAAIsR,iBAAiBlY,EAAGC,EAAGD,EAAIwF,EAAQvF,GACvC2G,EAAIuR,WAAAA,MAEJvR,EAAIT,KAAKnG,EAAGC,EAAG2B,EAAOD,GAG1BiF,EAAIvB,OAEAuF,EAAc,GACdhE,EAAIrC,SAGJ2H,IACAtF,EAAIoB,aAAe,SACnBpB,EAAImB,UAAY,SAChBnB,EAAIe,UAAYkE,EAChBjF,EAAIuB,SAASiB,EAAOpJ,EAAI4B,EAAQ,EAAG3B,EAAI0B,EAAS,OAAAyW,EAAAA,EAIxDhO,YAAAA,OAAAA,IAAAA,EAAcqE,EAAmBrE,YAAAA,EACjChB,EAAAA,EAAAA,MAAAA,EAAAA,EACAiB,eAAAA,OAAAA,IAAAA,EAAiBoE,EAAmBpE,eAAAA,EAAAA,EAAAA,EACpCC,gBAAAA,OAAAA,IAAAA,EAAkBmE,EAAmBnE,gBAAAA,EACrCC,EAAAA,EAAAA,eAEAE,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,OAAAA,EAAAA,EACAxE,aAAAA,QAAAA,IAAAA,EAAeuI,EAAmBvI,aAAAA,EAAAA,GAAAA,EAClC0E,YAAAA,QAAAA,IAAAA,GAAc6D,EAAmB7D,YAAAA,GACjCC,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzI,YAAAA,QAAAA,IAAAA,GAAcqM,EAAmBrM,YAAAA,GAEjCwR,GAAAA,EAAAA,YACAtI,GAAAA,EAAAA,aAEA2I,GAAAA,EAAAA,YAAAA,GAAAA,EAEAnJ,cAAAA,QAAAA,IAAAA,GAAgB2D,EAAmB3D,cAAAA,GAAAA,GAAAA,EACnCC,QAAAA,QAAAA,IAAAA,GAAU0D,EAAmB1D,QAAAA,GAC7BoB,GAAAA,EAAAA,QACAC,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,aAEAxD,GAAAA,EAAAA,QAAAA,GAAAA,EAEA6F,WAAAA,QAAAA,IAAAA,GAAaD,EAAmBC,WAAAA,GAEhC2J,GAAAA,EAAAA,UAEMC,IAAWC,EAAAA,EAAAA,QAAiC,MAE5CjV,IAAQC,EAAAA,EAAAA,MAAAA,IACuDoS,EAAAA,EAAAA,IACjE/T,EACAD,EACAwT,GAHIvE,GAAAA,GAAAA,OAAQkF,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAaH,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAAA,GAiBjD7B,GAAiB,CACjB3K,QAAAA,EACAD,MAAAA,EACAkC,aAAAA,GACA2I,YAAAA,GACAvJ,OAAAA,EACAD,QAAAA,EACAI,YAAAA,GACAN,eAAAA,EACAhB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACAtH,KAAAA,EACAmH,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAiH,OAAAA,GACAhP,MAAOkU,GACPnU,OAAQoU,GACRjM,QAAAA,EACAC,aAAAA,EACAH,WAAAA,EACAC,WAAAA,EACAO,YAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAzB,QAAAA,GACA+K,YAAAA,KArCArL,GAAAA,GAAAA,KACAsM,GAAAA,GAAAA,cACAnE,GAAAA,GAAAA,OACAC,GAAAA,GAAAA,OACA4D,GAAAA,GAAAA,SACA9D,GAAAA,GAAAA,gBACAiE,GAAAA,GAAAA,eACAE,GAAAA,GAAAA,cACAE,GAAAA,GAAAA,qBACAG,GAAAA,GAAAA,gBAAAA,IA+B0CvI,EAAAA,EAAAA,MAAtCC,GAAAA,GAAAA,qBAAsBE,GAAAA,GAAAA,YAGxBrE,GAAwBtF,EAAuB,CACjDd,YAAaH,EAAe,CACxBE,KAAMoG,GACNnG,YAAAA,GACAC,YAAa,YAAAyV,MAAS,CAClB9X,EAAG8X,EAAK9X,EACRC,EAAG6X,EAAK7X,EAAAA,EAEZqC,cAAe,gBAAGV,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAAA,MAAc,CACnCC,MAAAA,EACAD,OAAAA,EACAH,KAAMR,KAAK0H,IAAI9G,EAAOD,GAAAA,MAM5B0V,IAAoD9U,EAAAA,EAAAA,UACtD,iBAAO,CACH2D,aAAAA,GACA0E,YAAAA,GACAE,cAAAA,GACAwB,aAAa,EACbjC,eAAAA,EACAC,gBAAAA,EACAsG,OAAAA,GACAhP,MAAAA,EACAD,OAAAA,EACAmU,WAAAA,GACAC,YAAAA,GACAxN,KAAAA,GACAwM,WAAYE,GACZ7K,YAAAA,EACAsG,OAAAA,GACAC,OAAAA,GACA5F,QAAAA,GACA0F,gBAAAA,GACAtE,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GAAAA,GAEJ,CACInG,GACA0E,GACAE,GACAT,EACAC,EACAsG,GACAhP,EACAD,EACAmU,GACAC,GACAxN,GACA0M,GACA7K,EACAsG,GACAC,GACA5F,GACA0F,GACAtE,GACAC,GACAC,MAIRmM,EAAAA,EAAAA,YAAU,iBACA5R,EAAAA,OAAAA,EAAM0R,GAASG,cAAAA,EAATC,EAAkBC,WAAW,MAEpCL,GAASG,SACT7R,IAEL0R,GAASG,QAAQ7W,MAAQgU,GAAalH,GACtC4J,GAASG,QAAQ9W,OAASkU,GAAcnH,GAExC9H,EAAI4L,MAAM9D,GAAYA,IAEtB9H,EAAIe,UAAYrE,GAAMsV,WACtBhS,EAAIiS,SAAS,EAAG,EAAGjD,GAAYC,IAC/BjP,EAAIkS,UAAUlI,GAAOS,KAAMT,GAAOU,KAElC3F,EAAO9E,SAAQ,YACG,SAAV0Q,EA3PuD,iBA4P1CjU,GAAMsT,KAAKmC,KAAKzU,aAAgBhB,GAAMsT,KAAKmC,KAAKzU,YAAc,IACvEsC,EAAIW,UAAYjE,GAAMsT,KAAKmC,KAAKzU,YAChCsC,EAAIU,YAAchE,GAAMsT,KAAKmC,KAAKxU,OAE9B2F,IACA8O,EAAAA,EAAAA,IAAyCpS,EAAK,CAC1ChF,MAAAA,EACAD,OAAAA,EACA6Q,MAAO9B,GACP3B,KAAM,IACNoD,OAAQmD,IAIZnL,IACA6O,EAAAA,EAAAA,IAAyCpS,EAAK,CAC1ChF,MAAAA,EACAD,OAAAA,EACA6Q,MAAO7B,GACP5B,KAAM,IACNoD,OAAQoD,KAIH,SAAVgC,GACP0B,EAAAA,EAAAA,IAAmBrS,EAAK,CACpB8J,OAAQA,GACRC,OAAQA,GACR/O,MAAOkU,GACPnU,OAAQoU,GACRzE,IAAK8D,EACL0B,MAAOzB,EACP0B,OAAQ/M,EACRqH,KAAMpH,EACN3G,MAAAA,KAEa,SAAViU,EACP1C,GAAchO,SAAQ,YAClBoR,EAAUrR,EAAK,CACX6B,IAAAA,EACAoC,YAAa6J,GAAejM,GAC5BvC,aAAAA,GACA0E,YAAAA,GACAxB,MAAOmL,GAAS9L,EAAItG,MACpB0J,WAAY+I,GAAcnM,GAC1ByD,kBAAmB4I,GAAqBrM,IAAAA,IAG/B,YAAV8O,EACPtC,GAAgBpO,SAAQ,gBAAEkC,EAAAA,EAAAA,GAAQ5G,EAAAA,EAAAA,IAC9B+W,EAAAA,EAAAA,IAAqBtS,EAAAA,EAAAA,CAAAA,EACdmC,EAAAA,CACH5G,KAAAA,EACA8G,eAAgB6M,GAChB5M,gBAAiB6M,GACjBzS,MAAAA,KAAAA,IAGS,gBAAViU,EACPtQ,EAA0BL,EAAK,CAAExE,YAAaoG,GAAkBlF,MAAAA,KACxC,mBAAViU,GACdA,EAAM3Q,EAAKyQ,GAAAA,IAInBzQ,EAAIO,OAAAA,GACL,CACC6C,EACAC,EACAoL,EACAD,EACAP,GACA3O,GACA0E,GACApC,GACA0B,EACAC,EACAuK,GACAH,GACAK,GACAU,EACAC,EACAhM,EACA5H,EACAoU,GACAD,GACAuB,GACA1L,EACAnC,EACAyL,GACArE,GAAOS,KACPT,GAAOU,IACPuE,GACAD,GACAlH,GACAuJ,EACAvH,GACAC,GACAlH,EACAqL,GACAxR,GACA1B,IAAAA,IAGEuX,IAAmBnM,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACQ1E,IACA+P,GAASG,QAAS,CAATA,IAAAA,GAECW,EAAAA,EAAAA,IAAkBd,GAASG,QAASxL,GAA5CjN,EAAAA,EAAAA,GAAGC,EAAAA,EAAAA,GACJwI,EAAMmP,GAAmBrP,GAAMqI,GAAQ5Q,EAAGC,QAAAA,IAE5CwI,GACAkE,IACI5I,EAAAA,EAAAA,eAAcgH,GAAAA,EAAAA,CAAAA,EACPtC,EAAItG,KAAAA,CACP6I,MAAOvC,EAAIuC,MACX5B,MAAOX,EAAIW,MACX+B,MAAOsE,OAAOhH,EAAItG,KAAKgJ,UAE3B8B,GAGe,eAAfA,EAAMxN,OAAAA,MACN2M,IAAAA,GAAe3D,EAAItG,KAAM8K,KAG7BJ,IAAAA,CAAAA,GAGR,CAACA,GAAa+D,GAAQxE,GAAc7D,GAAMoE,GAAsB5B,KAG9DqC,IAAmBJ,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACQ1E,IACA+P,GAASG,QAAS,CAEvB5L,KAAAA,IAAAA,GAEeuM,EAAAA,EAAAA,IAAkBd,GAASG,QAASxL,GAA5CjN,EAAAA,EAAAA,GAAGC,EAAAA,EAAAA,GACJwI,EAAMmP,GAAmBrP,GAAMqI,GAAQ5Q,EAAGC,GAE5CwI,IAAAA,MACA4D,IAAAA,GAAe5D,EAAItG,KAAM8K,GAAAA,CAAAA,GAGjC,CAACJ,GAAa+D,GAAQvE,GAAc9D,KAGlCwE,IAAcC,EAAAA,EAAAA,cAChB,SAACC,GAAAA,GACQ1E,IACA+P,GAASG,QAAS,CAATA,IAAAA,GAECW,EAAAA,EAAAA,IAAkBd,GAASG,QAASxL,GAA5CjN,EAAAA,EAAAA,GAAGC,EAAAA,EAAAA,GACJwI,EAAMmP,GAAmBrP,GAAMqI,GAAQ5Q,EAAGC,QAAAA,IAE5CwI,IAAAA,MACA0D,IAAAA,GAAAA,EAAAA,CAAAA,EAAe1D,EAAItG,KAAM,CAAA6I,MAAOvC,EAAIuC,QAASiC,GAAAA,CAAAA,GAGrD,CAAC2D,GAAQzE,GAAS5D,KAAAA,OAIlBrE,EAAAA,EAAAA,KAAAA,SAAAA,CACImV,IAAK,YACDf,GAASG,QAAUa,EACfjB,IAAa,YAAaA,KAAWA,GAAUI,QAAUa,EAAAA,EAEjE1X,MAAOgU,GAAalH,GACpB/M,OAAQkU,GAAcnH,GACtBtK,MAAO,CACHxC,MAAOgU,GACPjU,OAAQkU,GACR0D,OAAQzO,GAAgB,OAAS,UAErCsB,aAActB,GAAgBqO,QAAAA,EAC9BrL,YAAahD,GAAgBqO,QAAAA,EAC7B9M,aAAcvB,GAAgBsC,QAAAA,EAC9BjB,QAASrB,GAAgBiC,QAAAA,GAAcc,EAKtC2L,IAAYC,EAAAA,EAAAA,aACrB,WAEIJ,GAAAA,IADEvO,EAAAA,EAAAA,cAAe2M,EAAAA,EAAAA,cAAenU,EAAAA,EAAAA,MAAUuO,EAAAA,EAAAA,EAAAA,IAAAA,OAG1C3N,EAAAA,EAAAA,KAACyT,EAAAA,GAAAA,CAAgB7M,cAAAA,EAAe2M,cAAAA,EAAenU,MAAAA,EAASG,SAAAA,EAASiB,UAC7DR,EAAAA,EAAAA,KAAC8T,GAAAA,EAAAA,CAAAA,EAA6BnG,EAAAA,CAAOwG,UAAWgB,MAAAA,IC5e/CK,GAAgB,SACzB7H,GAAAA,OAEA3N,EAAAA,EAAAA,KAACyV,EAAAA,EAAAA,CAAAA,SACI,gBAAG/X,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAAA,OAAauC,EAAAA,EAAAA,KAACsT,GAAAA,EAAAA,CAAc5V,MAAOA,EAAOD,OAAQA,GAAYkQ,GAAAA,GAAAA,GCH9C4H,EAAAA,EAAAA,aAAW,SAE5C5H,EAA2DwH,GAAAA,OAErDnV,EAAAA,EAAAA,KAACyV,EAAAA,EAAAA,CAAAA,SACI,gBAAG/X,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAAA,OACPuC,EAAAA,EAAAA,KAACsV,GAAAA,EAAAA,CACG5X,MAAOA,EACPD,OAAQA,GACHkQ,EAAAA,CACLwH,IAAKA,IAAAA,GAAAA,G,mBCMzBO,EAAOC,QAZP,SAAmBvG,EAAOwG,GAIxB,IAHA,IAAIhT,GAAS,EACTI,EAAkB,MAAToM,EAAgB,EAAIA,EAAMpM,SAE9BJ,EAAQI,IAC8B,IAAzC4S,EAASxG,EAAMxM,GAAQA,EAAOwM,KAIpC,OAAOA,CACT,C,wBCnBA,IAAIyG,EAAaC,EAAQ,OACrB1Q,EAAO0Q,EAAQ,OAenBJ,EAAOC,QAJP,SAAoBI,EAAQC,GAC1B,OAAOD,GAAUF,EAAWG,EAAQ5Q,EAAK4Q,GAASD,EACpD,C,wBCdA,IAAIF,EAAaC,EAAQ,OACrBG,EAASH,EAAQ,OAerBJ,EAAOC,QAJP,SAAsBI,EAAQC,GAC5B,OAAOD,GAAUF,EAAWG,EAAQC,EAAOD,GAASD,EACtD,C,wBCdA,IAAIG,EAAQJ,EAAQ,OAChBK,EAAYL,EAAQ,MACpBM,EAAcN,EAAQ,OACtBO,EAAaP,EAAQ,OACrBQ,EAAeR,EAAQ,OACvBS,EAAcT,EAAQ,OACtBU,EAAYV,EAAQ,OACpBW,EAAcX,EAAQ,OACtBY,EAAgBZ,EAAQ,OACxBa,EAAab,EAAQ,OACrBc,EAAed,EAAQ,OACvBe,EAASf,EAAQ,OACjBgB,EAAiBhB,EAAQ,OACzBiB,EAAiBjB,EAAQ,OACzBkB,EAAkBlB,EAAQ,OAC1BjH,EAAUiH,EAAQ,OAClBmB,EAAWnB,EAAQ,MACnBoB,EAAQpB,EAAQ,OAChBqB,EAAWrB,EAAQ,MACnBsB,EAAQtB,EAAQ,OAChB1Q,EAAO0Q,EAAQ,OACfG,EAASH,EAAQ,OAQjBuB,EAAU,qBAKVC,EAAU,oBAIVC,EAAY,kBAoBZC,EAAgB,CAAC,EACrBA,EAAcH,GAAWG,EA7BV,kBA8BfA,EAfqB,wBAeWA,EAdd,qBAelBA,EA9Bc,oBA8BWA,EA7BX,iBA8BdA,EAfiB,yBAeWA,EAdX,yBAejBA,EAdc,sBAcWA,EAbV,uBAcfA,EAbe,uBAaWA,EA5Bb,gBA6BbA,EA5BgB,mBA4BWA,EAAcD,GACzCC,EA3BgB,mBA2BWA,EA1Bd,gBA2BbA,EA1BgB,mBA0BWA,EAzBX,mBA0BhBA,EAhBe,uBAgBWA,EAfJ,8BAgBtBA,EAfgB,wBAeWA,EAdX,yBAcsC,EACtDA,EArCe,kBAqCWA,EAAcF,GACxCE,EA5BiB,qBA4BW,EA8F5B9B,EAAOC,QA5EP,SAAS8B,EAAUxQ,EAAOyQ,EAASC,EAAYxM,EAAK4K,EAAQ1G,GAC1D,IAAIuI,EACAC,EAnEgB,EAmEPH,EACTI,EAnEgB,EAmEPJ,EACTK,EAnEmB,EAmEVL,EAKb,GAHIC,IACFC,EAAS7B,EAAS4B,EAAW1Q,EAAOkE,EAAK4K,EAAQ1G,GAASsI,EAAW1Q,SAExD0C,IAAXiO,EACF,OAAOA,EAET,IAAKT,EAASlQ,GACZ,OAAOA,EAET,IAAI+Q,EAAQnJ,EAAQ5H,GACpB,GAAI+Q,GAEF,GADAJ,EAASd,EAAe7P,IACnB4Q,EACH,OAAOrB,EAAUvP,EAAO2Q,OAErB,CACL,IAAIK,EAAMpB,EAAO5P,GACbiR,EAASD,GAAOX,GA7EX,8BA6EsBW,EAE/B,GAAIhB,EAAShQ,GACX,OAAOsP,EAAYtP,EAAO4Q,GAE5B,GAAII,GAAOV,GAAaU,GAAOZ,GAAYa,IAAWnC,GAEpD,GADA6B,EAAUE,GAAUI,EAAU,CAAC,EAAIlB,EAAgB/P,IAC9C4Q,EACH,OAAOC,EACHpB,EAAczP,EAAOqP,EAAasB,EAAQ3Q,IAC1CwP,EAAYxP,EAAOoP,EAAWuB,EAAQ3Q,QAEvC,CACL,IAAKuQ,EAAcS,GACjB,OAAOlC,EAAS9O,EAAQ,CAAC,EAE3B2Q,EAASb,EAAe9P,EAAOgR,EAAKJ,EACtC,CACF,CAEAxI,IAAUA,EAAQ,IAAI6G,GACtB,IAAIiC,EAAU9I,EAAM+I,IAAInR,GACxB,GAAIkR,EACF,OAAOA,EAET9I,EAAMgJ,IAAIpR,EAAO2Q,GAEbR,EAAMnQ,GACRA,EAAMtE,SAAQ,SAAS2V,GACrBV,EAAOW,IAAId,EAAUa,EAAUZ,EAASC,EAAYW,EAAUrR,EAAOoI,GACvE,IACS6H,EAAMjQ,IACfA,EAAMtE,SAAQ,SAAS2V,EAAUnN,GAC/ByM,EAAOS,IAAIlN,EAAKsM,EAAUa,EAAUZ,EAASC,EAAYxM,EAAKlE,EAAOoI,GACvE,IAGF,IAII1B,EAAQqK,OAAQrO,GAJLoO,EACVD,EAASlB,EAAeD,EACxBmB,EAAS7B,EAAS7Q,GAEkB6B,GASzC,OARAkP,EAAUxI,GAAS1G,GAAO,SAASqR,EAAUnN,GACvCwC,IAEF2K,EAAWrR,EADXkE,EAAMmN,IAIRlC,EAAYwB,EAAQzM,EAAKsM,EAAUa,EAAUZ,EAASC,EAAYxM,EAAKlE,EAAOoI,GAChF,IACOuI,CACT,C,wBCnKA,IAAIY,EAAW1C,EAAQ,OAoBvBJ,EAAOC,QAVP,SAAoB8C,EAAYC,GAC9B,IAAId,EAAS,GAMb,OALAY,EAASC,GAAY,SAASxR,EAAOrE,EAAO6V,GACtCC,EAAUzR,EAAOrE,EAAO6V,IAC1Bb,EAAO1K,KAAKjG,EAEhB,IACO2Q,CACT,C,wBClBA,IAAIf,EAASf,EAAQ,OACjB6C,EAAe7C,EAAQ,OAgB3BJ,EAAOC,QAJP,SAAmB1O,GACjB,OAAO0R,EAAa1R,IAVT,gBAUmB4P,EAAO5P,EACvC,C,wBCfA,IAAI4P,EAASf,EAAQ,OACjB6C,EAAe7C,EAAQ,OAgB3BJ,EAAOC,QAJP,SAAmB1O,GACjB,OAAO0R,EAAa1R,IAVT,gBAUmB4P,EAAO5P,EACvC,C,mBCeAyO,EAAOC,QArBP,SAAmBvG,EAAOxD,EAAOC,GAC/B,IAAIjJ,GAAS,EACTI,EAASoM,EAAMpM,OAEf4I,EAAQ,IACVA,GAASA,EAAQ5I,EAAS,EAAKA,EAAS4I,IAE1CC,EAAMA,EAAM7I,EAASA,EAAS6I,GACpB,IACRA,GAAO7I,GAETA,EAAS4I,EAAQC,EAAM,EAAMA,EAAMD,IAAW,EAC9CA,KAAW,EAGX,IADA,IAAIgM,EAAS9L,MAAM9I,KACVJ,EAAQI,GACf4U,EAAOhV,GAASwM,EAAMxM,EAAQgJ,GAEhC,OAAOgM,CACT,C,wBC5BA,IAAIgB,EAAW9C,EAAQ,OACnB+C,EAAO/C,EAAQ,OACfgD,EAAShD,EAAQ,OACjBiD,EAAQjD,EAAQ,OAgBpBJ,EAAOC,QANP,SAAmBI,EAAQpV,GAGzB,OAFAA,EAAOiY,EAASjY,EAAMoV,GAEL,OADjBA,EAAS+C,EAAO/C,EAAQpV,YACQoV,EAAOgD,EAAMF,EAAKlY,IACpD,C,wBCjBA,IAAIqY,EAAmBlD,EAAQ,MAe/BJ,EAAOC,QALP,SAAuBsD,EAAUpB,GAC/B,IAAIqB,EAASrB,EAASmB,EAAiBC,EAASC,QAAUD,EAASC,OACnE,OAAO,IAAID,EAASE,YAAYD,EAAQD,EAASG,WAAYH,EAASI,WACxE,C,oBCZA,IAAIC,EAAU,OAed5D,EAAOC,QANP,SAAqB4D,GACnB,IAAI3B,EAAS,IAAI2B,EAAOJ,YAAYI,EAAOvD,OAAQsD,EAAQE,KAAKD,IAEhE,OADA3B,EAAO6B,UAAYF,EAAOE,UACnB7B,CACT,C,wBCdA,IAAI8B,EAAS5D,EAAQ,OAGjB6D,EAAcD,EAASA,EAAOE,eAAYjQ,EAC1CkQ,EAAgBF,EAAcA,EAAYG,aAAUnQ,EAaxD+L,EAAOC,QAJP,SAAqB7T,GACnB,OAAO+X,EAAgBxO,OAAOwO,EAAcE,KAAKjY,IAAW,CAAC,CAC/D,C,wBCfA,IAAI+T,EAAaC,EAAQ,OACrBkE,EAAalE,EAAQ,OAczBJ,EAAOC,QAJP,SAAqBK,EAAQD,GAC3B,OAAOF,EAAWG,EAAQgE,EAAWhE,GAASD,EAChD,C,wBCbA,IAAIF,EAAaC,EAAQ,OACrBmE,EAAenE,EAAQ,OAc3BJ,EAAOC,QAJP,SAAuBK,EAAQD,GAC7B,OAAOF,EAAWG,EAAQiE,EAAajE,GAASD,EAClD,C,wBCbA,IAAImE,EAAgBpE,EAAQ,OAe5BJ,EAAOC,QAJP,SAAyB1O,GACvB,OAAOiT,EAAcjT,QAAS0C,EAAY1C,CAC5C,C,wBCbA,IAAIkT,EAAiBrE,EAAQ,OACzBmE,EAAenE,EAAQ,OACvBG,EAASH,EAAQ,OAcrBJ,EAAOC,QAJP,SAAsBI,GACpB,OAAOoE,EAAepE,EAAQE,EAAQgE,EACxC,C,wBCdA,IAAIG,EAAYtE,EAAQ,OACpBuE,EAAevE,EAAQ,OACvBkE,EAAalE,EAAQ,OACrBwE,EAAYxE,EAAQ,OAYpBmE,EATmB5O,OAAOkP,sBASqB,SAASxE,GAE1D,IADA,IAAI6B,EAAS,GACN7B,GACLqE,EAAUxC,EAAQoC,EAAWjE,IAC7BA,EAASsE,EAAatE,GAExB,OAAO6B,CACT,EAPuC0C,EASvC5E,EAAOC,QAAUsE,C,oBCvBjB,IAGIO,EAHcnP,OAAOuO,UAGQY,eAqBjC9E,EAAOC,QAZP,SAAwBvG,GACtB,IAAIpM,EAASoM,EAAMpM,OACf4U,EAAS,IAAIxI,EAAM+J,YAAYnW,GAOnC,OAJIA,GAA6B,iBAAZoM,EAAM,IAAkBoL,EAAeT,KAAK3K,EAAO,WACtEwI,EAAOhV,MAAQwM,EAAMxM,MACrBgV,EAAO6C,MAAQrL,EAAMqL,OAEhB7C,CACT,C,wBCvBA,IAAIoB,EAAmBlD,EAAQ,MAC3B4E,EAAgB5E,EAAQ,OACxB6E,EAAc7E,EAAQ,OACtB8E,EAAc9E,EAAQ,OACtB+E,EAAkB/E,EAAQ,OAwE9BJ,EAAOC,QApCP,SAAwBI,EAAQkC,EAAKJ,GACnC,IAAIiD,EAAO/E,EAAOoD,YAClB,OAAQlB,GACN,IA3BiB,uBA4Bf,OAAOe,EAAiBjD,GAE1B,IAvCU,mBAwCV,IAvCU,gBAwCR,OAAO,IAAI+E,GAAM/E,GAEnB,IAjCc,oBAkCZ,OAAO2E,EAAc3E,EAAQ8B,GAE/B,IAnCa,wBAmCI,IAlCJ,wBAmCb,IAlCU,qBAkCI,IAjCH,sBAiCkB,IAhClB,sBAiCX,IAhCW,sBAgCI,IA/BG,6BA+BmB,IA9BzB,uBA8ByC,IA7BzC,uBA8BV,OAAOgD,EAAgB9E,EAAQ8B,GAEjC,IAjDS,eA2DT,IAxDS,eAyDP,OAAO,IAAIiD,EARb,IAnDY,kBAoDZ,IAjDY,kBAkDV,OAAO,IAAIA,EAAK/E,GAElB,IAtDY,kBAuDV,OAAO4E,EAAY5E,GAKrB,IAzDY,kBA0DV,OAAO6E,EAAY7E,GAEzB,C,wBC1EA,IAAIgF,EAAUjF,EAAQ,OAClBkF,EAAYlF,EAAQ,MAcxBJ,EAAOC,QAJP,SAAgBI,EAAQpV,GACtB,OAAOA,EAAKqC,OAAS,EAAI+S,EAASgF,EAAQhF,EAAQiF,EAAUra,EAAM,GAAI,GACxE,C,wBCbA,IAAIsa,EAAcnF,EAAQ,OACtBoF,EAAapF,EAAQ,OACrBqF,EAAerF,EAAQ,OACvBjH,EAAUiH,EAAQ,OAgDtBJ,EAAOC,QALP,SAAgB8C,EAAYC,GAE1B,OADW7J,EAAQ4J,GAAcwC,EAAcC,GACnCzC,EAAY0C,EAAazC,EAAW,GAClD,C,wBCjDA,IAAI0C,EAAYtF,EAAQ,OACpBuF,EAAYvF,EAAQ,OACpBwF,EAAWxF,EAAQ,OAGnByF,EAAYD,GAAYA,EAASpE,MAmBjCA,EAAQqE,EAAYF,EAAUE,GAAaH,EAE/C1F,EAAOC,QAAUuB,C,wBC1BjB,IAAIsE,EAAa1F,EAAQ,OACrB6C,EAAe7C,EAAQ,OAoC3BJ,EAAOC,QALP,SAAkB1O,GAChB,MAAuB,iBAATA,GACX0R,EAAa1R,IA9BF,mBA8BYuU,EAAWvU,EACvC,C,wBCnCA,IAAIwU,EAAY3F,EAAQ,OACpBuF,EAAYvF,EAAQ,OACpBwF,EAAWxF,EAAQ,OAGnB4F,EAAYJ,GAAYA,EAASlE,MAmBjCA,EAAQsE,EAAYL,EAAUK,GAAaD,EAE/C/F,EAAOC,QAAUyB,C,wBC1BjB,IAAIuE,EAAW7F,EAAQ,OACnB2B,EAAY3B,EAAQ,OACpB8F,EAAY9F,EAAQ,OACpB8C,EAAW9C,EAAQ,OACnBD,EAAaC,EAAQ,OACrB+F,EAAkB/F,EAAQ,OAC1BgG,EAAWhG,EAAQ,OACnBc,EAAed,EAAQ,OA2BvBvV,EAAOub,GAAS,SAAS/F,EAAQgG,GACnC,IAAInE,EAAS,CAAC,EACd,GAAc,MAAV7B,EACF,OAAO6B,EAET,IAAIC,GAAS,EACbkE,EAAQJ,EAASI,GAAO,SAASpb,GAG/B,OAFAA,EAAOiY,EAASjY,EAAMoV,GACtB8B,IAAWA,EAASlX,EAAKqC,OAAS,GAC3BrC,CACT,IACAkV,EAAWE,EAAQa,EAAab,GAAS6B,GACrCC,IACFD,EAASH,EAAUG,EAAQoE,EAAwDH,IAGrF,IADA,IAAI7Y,EAAS+Y,EAAM/Y,OACZA,KACL4Y,EAAUhE,EAAQmE,EAAM/Y,IAE1B,OAAO4U,CACT,IAEAlC,EAAOC,QAAUpV,C","sources":["../node_modules/@nivo/annotations/src/props.ts","../node_modules/@nivo/annotations/src/utils.ts","../node_modules/@nivo/annotations/src/compute.ts","../node_modules/@nivo/annotations/src/hooks.ts","../node_modules/@nivo/annotations/src/AnnotationNote.tsx","../node_modules/@nivo/annotations/src/AnnotationLink.tsx","../node_modules/@nivo/annotations/src/CircleAnnotationOutline.tsx","../node_modules/@nivo/annotations/src/DotAnnotationOutline.tsx","../node_modules/@nivo/annotations/src/RectAnnotationOutline.tsx","../node_modules/@nivo/annotations/src/Annotation.tsx","../node_modules/@nivo/annotations/src/canvas.ts","../node_modules/@nivo/bar/src/BarAnnotations.tsx","../node_modules/@nivo/bar/src/BarLegends.tsx","../node_modules/@nivo/bar/src/BarItem.tsx","../node_modules/@nivo/bar/src/props.ts","../node_modules/@nivo/bar/src/BarTooltip.tsx","../node_modules/@nivo/bar/src/compute/common.ts","../node_modules/@nivo/bar/src/compute/grouped.ts","../node_modules/@nivo/bar/src/compute/stacked.ts","../node_modules/@nivo/bar/src/compute/legends.ts","../node_modules/@nivo/bar/src/hooks.ts","../node_modules/@nivo/bar/src/Bar.tsx","../node_modules/@nivo/bar/src/BarCanvas.tsx","../node_modules/@nivo/bar/src/ResponsiveBar.tsx","../node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx","../node_modules/lodash/_arrayEach.js","../node_modules/lodash/_baseAssign.js","../node_modules/lodash/_baseAssignIn.js","../node_modules/lodash/_baseClone.js","../node_modules/lodash/_baseFilter.js","../node_modules/lodash/_baseIsMap.js","../node_modules/lodash/_baseIsSet.js","../node_modules/lodash/_baseSlice.js","../node_modules/lodash/_baseUnset.js","../node_modules/lodash/_cloneDataView.js","../node_modules/lodash/_cloneRegExp.js","../node_modules/lodash/_cloneSymbol.js","../node_modules/lodash/_copySymbols.js","../node_modules/lodash/_copySymbolsIn.js","../node_modules/lodash/_customOmitClone.js","../node_modules/lodash/_getAllKeysIn.js","../node_modules/lodash/_getSymbolsIn.js","../node_modules/lodash/_initCloneArray.js","../node_modules/lodash/_initCloneByTag.js","../node_modules/lodash/_parent.js","../node_modules/lodash/filter.js","../node_modules/lodash/isMap.js","../node_modules/lodash/isNumber.js","../node_modules/lodash/isSet.js","../node_modules/lodash/omit.js"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"],"names":["defaultProps","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","computeAnnotation","annotation","computedNoteX","computedNoteY","x","y","noteX","noteY","noteWidth","noteTextOffset","_isNumber","abs","Error","computedX","computedY","angle","sourceX","sourceY","targetX","targetY","Math","atan2","absoluteAngleDegrees","radiansToDegrees","getLinkAngle","position","positionFromAngle","degreesToRadians","size","eighth","round","height","width","textX","noteLineX","points","text","useAnnotations","t","data","annotations","getPosition","getDimensions","useMemo","reduce","acc","offset","_filter","match","map","datum","dimensions","_omit","bindAnnotations","useComputedAnnotations","computed","AnnotationNote","note","theme","useTheme","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","omit","children","AnnotationLink","isOutline","path","firstPoint","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","dotSize","symbol","RectAnnotationOutline","borderRadius","rect","rx","ry","Annotation","useComputedAnnotation","noteType","isValidElement","isSvgNote","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","isCanvasNote","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","textAlign","textBaseline","lineJoin","strokeText","fillText","restore","BarAnnotations","e","bars","boundAnnotations","bar","max","i","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","indexScale","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","value","formattedValue","enableChip","tooltipLabel","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","g","to","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defs","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","domain","rawValue","barHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","generateGroupedBars","s","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","ge","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","stack","stackOffsetDiverging","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","quadraticCurveTo","closePath","Q","canvasRef","canvasEl","useRef","useEffect","current","_canvasEl$current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","module","exports","iteratee","copyObject","require","object","source","keysIn","Stack","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isBuffer","isMap","isObject","isSet","argsTag","funcTag","objectTag","cloneableTags","baseClone","bitmask","customizer","result","isDeep","isFlat","isFull","isArr","tag","isFunc","stacked","get","set","subValue","add","baseEach","collection","predicate","isObjectLike","castPath","last","parent","toKey","cloneArrayBuffer","dataView","buffer","constructor","byteOffset","byteLength","reFlags","regexp","exec","lastIndex","Symbol","symbolProto","prototype","symbolValueOf","valueOf","call","getSymbols","getSymbolsIn","isPlainObject","baseGetAllKeys","arrayPush","getPrototype","stubArray","getOwnPropertySymbols","hasOwnProperty","input","cloneDataView","cloneRegExp","cloneSymbol","cloneTypedArray","Ctor","baseGet","baseSlice","arrayFilter","baseFilter","baseIteratee","baseIsMap","baseUnary","nodeUtil","nodeIsMap","baseGetTag","baseIsSet","nodeIsSet","arrayMap","baseUnset","customOmitClone","flatRest","paths","CLONE_DEEP_FLAG"],"sourceRoot":""}